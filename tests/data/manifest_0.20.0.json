{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v2.json", "dbt_version": "0.20.0", "generated_at": "2021-12-05T17:10:03.149699Z", "invocation_id": "5283dd32-10cc-4dab-b234-dc379f940299", "env": {}, "project_id": "397e73f49b49d4221b0547fd86449797", "user_id": "6da81b60-2447-4b5e-93cb-b990189de84a", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.ro_exemplar.order_items": {"raw_sql": "with orders as (\n    \n    select * from {{ ref('stg_tpch_orders') }}\n\n),\n\nline_item as (\n\n    select * from {{ ref('stg_tpch_line_items') }}\n\n)\nselect \n\n    line_item.order_item_id,\n    orders.order_id,\n    orders.customer_id,\n    line_item.part_id,\n    line_item.supplier_id,\n    orders.order_date,\n    orders.status_code as order_status_code,\n    \n    \n    line_item.return_flag,\n    \n    line_item.line_number,\n    line_item.status_code as order_item_status_code,\n    line_item.ship_date,\n    line_item.commit_date,\n    line_item.receipt_date,\n    line_item.ship_mode,\n    line_item.extended_price,\n    line_item.quantity,\n    \n    -- extended_price is actually the line item total,\n    -- so we back out the extended price per item\n    (line_item.extended_price/nullif(line_item.quantity, 0)){{ money() }} as base_price,\n    line_item.discount_percentage,\n    (base_price * (1 - line_item.discount_percentage)){{ money() }} as discounted_price,\n\n    line_item.extended_price as gross_item_sales_amount,\n    (line_item.extended_price * (1 - line_item.discount_percentage)){{ money() }} as discounted_item_sales_amount,\n    -- We model discounts as negative amounts\n    (-1 * line_item.extended_price * line_item.discount_percentage){{ money() }} as item_discount_amount,\n    line_item.tax_rate,\n    ((gross_item_sales_amount + item_discount_amount) * line_item.tax_rate){{ money() }} as item_tax_amount,\n    (\n        gross_item_sales_amount + \n        item_discount_amount + \n        item_tax_amount\n    ){{ money() }} as net_item_sales_amount\n\nfrom\n    orders\ninner join line_item\n        on orders.order_id = line_item.order_id\norder by\n    orders.order_date", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ro_exemplar.money"], "nodes": ["model.ro_exemplar.stg_tpch_orders", "model.ro_exemplar.stg_tpch_line_items"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "intermediate", "order_items"], "unique_id": "model.ro_exemplar.order_items", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "intermediate/order_items.sql", "original_file_path": "models/intermediate/order_items.sql", "name": "order_items", "alias": "order_items", "checksum": {"name": "sha256", "checksum": "e995ee32a1f4f80fa2d4eefb6c103551c2f801382c7984d69785e3f8baba6aa3"}, "tags": [], "refs": [["stg_tpch_orders"], ["stg_tpch_line_items"]], "sources": [], "description": "Intermediate model where we calculate item price, discounts and tax. This model is at the order item level.", "columns": {"order_item_id": {"name": "order_item_id", "description": "surrogate key for the model -- combo of order_id + line_number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "foreign id for orders", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "foreign id for customers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "part_id": {"name": "part_id", "description": "foreign id for part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "supplier_id": {"name": "supplier_id", "description": "foreign id for suppliers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_status_code": {"name": "order_status_code", "description": "status of the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "return_flag": {"name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_number": {"name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_item_status_code": {"name": "order_item_status_code", "description": "status of the order item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ship_date": {"name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "quote": null, "tags": []}, "commit_date": {"name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_date": {"name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ship_mode": {"name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extended_price": {"name": "extended_price", "description": "line item price", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "total units", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_price": {"name": "base_price", "description": "since extended_price is the line item total, we back out the price per item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_percentage": {"name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discounted_price": {"name": "discounted_price", "description": "factoring in the discount_percentage, the line item discount total", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gross_item_sales_amount": {"name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discounted_item_sales_amount": {"name": "discounted_item_sales_amount", "description": "line item (includes quantity) discount amount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_discount_amount": {"name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_tax_amount": {"name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_item_sales_amount": {"name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/intermediate/intermediate.yml", "compiled_path": "target/compiled/ro_exemplar/models/intermediate/order_items.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724204, "compiled_sql": "with orders as (\n    \n    select * from \"postgres\".\"baseschema\".\"stg_tpch_orders\"\n\n),\n\nline_item as (\n\n    select * from \"postgres\".\"baseschema\".\"stg_tpch_line_items\"\n\n)\nselect \n\n    line_item.order_item_id,\n    orders.order_id,\n    orders.customer_id,\n    line_item.part_id,\n    line_item.supplier_id,\n    orders.order_date,\n    orders.status_code as order_status_code,\n    \n    \n    line_item.return_flag,\n    \n    line_item.line_number,\n    line_item.status_code as order_item_status_code,\n    line_item.ship_date,\n    line_item.commit_date,\n    line_item.receipt_date,\n    line_item.ship_mode,\n    line_item.extended_price,\n    line_item.quantity,\n    \n    -- extended_price is actually the line item total,\n    -- so we back out the extended price per item\n    (line_item.extended_price/nullif(line_item.quantity, 0))::decimal(16,4) as base_price,\n    line_item.discount_percentage,\n    (base_price * (1 - line_item.discount_percentage))::decimal(16,4) as discounted_price,\n\n    line_item.extended_price as gross_item_sales_amount,\n    (line_item.extended_price * (1 - line_item.discount_percentage))::decimal(16,4) as discounted_item_sales_amount,\n    -- We model discounts as negative amounts\n    (-1 * line_item.extended_price * line_item.discount_percentage)::decimal(16,4) as item_discount_amount,\n    line_item.tax_rate,\n    ((gross_item_sales_amount + item_discount_amount) * line_item.tax_rate)::decimal(16,4) as item_tax_amount,\n    (\n        gross_item_sales_amount + \n        item_discount_amount + \n        item_tax_amount\n    )::decimal(16,4) as net_item_sales_amount\n\nfrom\n    orders\ninner join line_item\n        on orders.order_id = line_item.order_id\norder by\n    orders.order_date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"order_items\""}, "model.ro_exemplar.part_suppliers": {"raw_sql": "with part as (\n    \n    select * from {{ ref('stg_tpch_parts') }}\n\n),\n\nsupplier as (\n\n    select * from {{ ref('stg_tpch_suppliers') }}\n\n),\n\npart_supplier as (\n\n    select * from {{ ref('stg_tpch_part_suppliers') }}\n\n),\n\nfinal as (\n    select \n\n    part_supplier.part_supplier_id,\n    part.part_id,\n    part.name as part_name,\n    part.manufacturer,\n    part.brand,\n    part.type as part_type,\n    part.size as part_size,\n    part.container,\n    part.retail_price,\n\n    supplier.supplier_id,\n    supplier.supplier_name,\n    supplier.supplier_address,\n    supplier.phone_number,\n    supplier.account_balance,\n    supplier.nation_id,\n\n    part_supplier.available_quantity,\n    part_supplier.cost\nfrom\n    part \ninner join \n    part_supplier\n        on part.part_id = part_supplier.part_id\ninner join\n    supplier\n        on part_supplier.supplier_id = supplier.supplier_id\norder by\n    part.part_id\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ro_exemplar.stg_tpch_parts", "model.ro_exemplar.stg_tpch_suppliers", "model.ro_exemplar.stg_tpch_part_suppliers"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "intermediate", "part_suppliers"], "unique_id": "model.ro_exemplar.part_suppliers", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "intermediate/part_suppliers.sql", "original_file_path": "models/intermediate/part_suppliers.sql", "name": "part_suppliers", "alias": "part_suppliers", "checksum": {"name": "sha256", "checksum": "c242ad7386479e31d37a2db35ecfc95be0c5801bf11f92f785f7b5e507f05baf"}, "tags": [], "refs": [["stg_tpch_parts"], ["stg_tpch_suppliers"], ["stg_tpch_part_suppliers"]], "sources": [], "description": "Intermediate model where we join part, supplier and part_supplier. This model is at the part supplier level.", "columns": {"part_supplier_id": {"name": "part_supplier_id", "description": "primary id of the models", "meta": {}, "data_type": null, "quote": null, "tags": []}, "part_id": {"name": "part_id", "description": "foreign id for part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "part_name": {"name": "part_name", "description": "name of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "manufacturer": {"name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "part_type": {"name": "part_type", "description": "type of part including material", "meta": {}, "data_type": null, "quote": null, "tags": []}, "part_size": {"name": "part_size", "description": "size of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "container": {"name": "container", "description": "container of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "retail_price": {"name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "quote": null, "tags": []}, "supplier_id": {"name": "supplier_id", "description": "foreign id for supplier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "supplier_name": {"name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "supplier_address": {"name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nation_id": {"name": "nation_id", "description": "foreign id for nation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "available_quantity": {"name": "available_quantity", "description": "raw available quantity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "raw cost", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/intermediate/intermediate.yml", "compiled_path": "target/compiled/ro_exemplar/models/intermediate/part_suppliers.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724204, "compiled_sql": "with part as (\n    \n    select * from \"postgres\".\"baseschema\".\"stg_tpch_parts\"\n\n),\n\nsupplier as (\n\n    select * from \"postgres\".\"baseschema\".\"stg_tpch_suppliers\"\n\n),\n\npart_supplier as (\n\n    select * from \"postgres\".\"baseschema\".\"stg_tpch_part_suppliers\"\n\n),\n\nfinal as (\n    select \n\n    part_supplier.part_supplier_id,\n    part.part_id,\n    part.name as part_name,\n    part.manufacturer,\n    part.brand,\n    part.type as part_type,\n    part.size as part_size,\n    part.container,\n    part.retail_price,\n\n    supplier.supplier_id,\n    supplier.supplier_name,\n    supplier.supplier_address,\n    supplier.phone_number,\n    supplier.account_balance,\n    supplier.nation_id,\n\n    part_supplier.available_quantity,\n    part_supplier.cost\nfrom\n    part \ninner join \n    part_supplier\n        on part.part_id = part_supplier.part_id\ninner join\n    supplier\n        on part_supplier.supplier_id = supplier.supplier_id\norder by\n    part.part_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"part_suppliers\""}, "model.ro_exemplar.agg_customer_orders": {"raw_sql": "select\n  customer_id,\n  sum(gross_item_sales_amount) as total_sales\nfrom {{ ref('fct_orders') }}\ngroup by 1 \norder by 2 desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ro_exemplar.fct_orders"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "marts", "agg_customer_orders"], "unique_id": "model.ro_exemplar.agg_customer_orders", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "marts/agg_customer_orders.sql", "original_file_path": "models/marts/agg_customer_orders.sql", "name": "agg_customer_orders", "alias": "agg_customer_orders", "checksum": {"name": "sha256", "checksum": "f54eb622bdb7dfb5e9fdd8611a1bf3cb121231dab1ba4abe81bc269a90a8ccbf"}, "tags": [], "refs": [["fct_orders"]], "sources": [], "description": "Aggregated orders data by customer", "columns": {"customer_id": {"name": "customer_id", "description": "Primary key for customers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "Sum of gross items sales amount by customer", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/marts/core.yml", "compiled_path": "target/compiled/ro_exemplar/models/marts/agg_customer_orders.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "select\n  customer_id,\n  sum(gross_item_sales_amount) as total_sales\nfrom \"postgres\".\"baseschema\".\"fct_orders\"\ngroup by 1 \norder by 2 desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"agg_customer_orders\""}, "model.ro_exemplar.dim_customers": {"raw_sql": "{{\n    config(\n        materialized = 'table',\n        transient=false\n    )\n}}\n\nwith customer as (\n\n    select * from {{ ref('stg_tpch_customers') }}\n\n),\nnation as (\n\n    select * from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n    select * from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n    select \n        customer.customer_id,\n        customer.name,\n        customer.address,\n        {# nation.nation_id as nation_id, #}\n        nation.name as nation,\n        {# region.region_id as region_id, #}\n        region.name as region,\n        customer.phone_number,\n        customer.account_balance,\n        customer.market_segment\n    from\n        customer\n        inner join nation\n            on customer.nation_id = nation.nation_id\n        inner join region\n            on nation.region_id = region.region_id\n)\nselect \n    *\nfrom\n    final\norder by\n    customer_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ro_exemplar.stg_tpch_customers", "model.ro_exemplar.stg_tpch_nations", "model.ro_exemplar.stg_tpch_regions"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "transient": false, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "marts", "dim_customers"], "unique_id": "model.ro_exemplar.dim_customers", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "marts/dim_customers.sql", "original_file_path": "models/marts/dim_customers.sql", "name": "dim_customers", "alias": "dim_customers", "checksum": {"name": "sha256", "checksum": "a30f2d3afdf33fc50c5e3ef8385482c51e8c133c250368d6c32fee4c0e6cae4c"}, "tags": [], "refs": [["stg_tpch_customers"], ["stg_tpch_nations"], ["stg_tpch_regions"]], "sources": [], "description": "Customer dimensions table", "columns": {"customer_id": {"name": "customer_id", "description": "Primary id on the customers table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "region name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "customer id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address": {"name": "address", "description": "address of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nation": {"name": "nation", "description": "nation name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": []}, "market_segment": {"name": "market_segment", "description": "market segment of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/marts/core.yml", "compiled_path": "target/compiled/ro_exemplar/models/marts/dim_customers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "transient": false}, "created_at": 1638724204, "compiled_sql": "\n\nwith customer as (\n\n    select * from \"postgres\".\"baseschema\".\"stg_tpch_customers\"\n\n),\nnation as (\n\n    select * from \"postgres\".\"baseschema\".\"stg_tpch_nations\"\n),\nregion as (\n\n    select * from \"postgres\".\"baseschema\".\"stg_tpch_regions\"\n\n),\nfinal as (\n    select \n        customer.customer_id,\n        customer.name,\n        customer.address,\n        \n        nation.name as nation,\n        \n        region.name as region,\n        customer.phone_number,\n        customer.account_balance,\n        customer.market_segment\n    from\n        customer\n        inner join nation\n            on customer.nation_id = nation.nation_id\n        inner join region\n            on nation.region_id = region.region_id\n)\nselect \n    *\nfrom\n    final\norder by\n    customer_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"dim_customers\""}, "model.ro_exemplar.dim_suppliers": {"raw_sql": "{{\n    config(\n        materialized = 'table'\n    )\n}}\n\nwith supplier as (\n\n    select * from {{ ref('stg_tpch_suppliers') }}\n\n),\nnation as (\n\n    select * from {{ ref('stg_tpch_nations') }}\n),\nregion as (\n\n    select * from {{ ref('stg_tpch_regions') }}\n\n),\nfinal as (\n\n    select \n        supplier.supplier_id,\n        supplier.supplier_name,\n        supplier.supplier_address,\n        nation.name as nation,\n        region.name as region,\n        supplier.phone_number,\n        supplier.account_balance\n    from\n        supplier\n    inner join nation\n            on supplier.nation_id = nation.nation_id\n    inner join region \n            on nation.region_id = region.region_id\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ro_exemplar.stg_tpch_suppliers", "model.ro_exemplar.stg_tpch_nations", "model.ro_exemplar.stg_tpch_regions"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "marts", "dim_suppliers"], "unique_id": "model.ro_exemplar.dim_suppliers", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "marts/dim_suppliers.sql", "original_file_path": "models/marts/dim_suppliers.sql", "name": "dim_suppliers", "alias": "dim_suppliers", "checksum": {"name": "sha256", "checksum": "84cd90c9e682025d036a6d5303adeeeead3884bf4ca0c8730239722447e8f9d1"}, "tags": [], "refs": [["stg_tpch_suppliers"], ["stg_tpch_nations"], ["stg_tpch_regions"]], "sources": [], "description": "Suppliers dimensions table", "columns": {"supplier_id": {"name": "supplier_id", "description": "primary id of the model", "meta": {}, "data_type": null, "quote": null, "tags": []}, "supplier_name": {"name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "supplier_address": {"name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nation": {"name": "nation", "description": "nation name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region": {"name": "region", "description": "region name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/marts/core.yml", "compiled_path": "target/compiled/ro_exemplar/models/marts/dim_suppliers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1638724204, "compiled_sql": "\n\nwith supplier as (\n\n    select * from \"postgres\".\"baseschema\".\"stg_tpch_suppliers\"\n\n),\nnation as (\n\n    select * from \"postgres\".\"baseschema\".\"stg_tpch_nations\"\n),\nregion as (\n\n    select * from \"postgres\".\"baseschema\".\"stg_tpch_regions\"\n\n),\nfinal as (\n\n    select \n        supplier.supplier_id,\n        supplier.supplier_name,\n        supplier.supplier_address,\n        nation.name as nation,\n        region.name as region,\n        supplier.phone_number,\n        supplier.account_balance\n    from\n        supplier\n    inner join nation\n            on supplier.nation_id = nation.nation_id\n    inner join region \n            on nation.region_id = region.region_id\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"dim_suppliers\""}, "model.ro_exemplar.fct_order_items": {"raw_sql": "{{\n    config(\n        materialized = 'table',\n        tags = ['finance']\n    )\n}}\n\nwith order_item as (\n    \n    select * from {{ ref('order_items') }}\n\n),\npart_supplier as (\n    \n    select * from {{ ref('part_suppliers') }}\n\n),\nfinal as (\n    select \n        order_item.order_item_id,\n        order_item.order_id,\n        order_item.order_date,\n        order_item.customer_id,\n        order_item.part_id,\n        order_item.supplier_id,\n        order_item.order_item_status_code,\n        order_item.return_flag,\n        order_item.line_number,\n        order_item.ship_date,\n        order_item.commit_date,\n        order_item.receipt_date,\n        order_item.ship_mode,\n        part_supplier.cost as supplier_cost,\n        {# ps.retail_price, #}\n        order_item.base_price,\n        order_item.discount_percentage,\n        order_item.discounted_price,\n        order_item.tax_rate,\n        \n        1 as order_item_count,\n        order_item.quantity,\n        order_item.gross_item_sales_amount,\n        order_item.discounted_item_sales_amount,\n        order_item.item_discount_amount,\n        order_item.item_tax_amount,\n        order_item.net_item_sales_amount\n\n    from\n        order_item\n        inner join part_supplier\n            on order_item.part_id = part_supplier.part_id and\n                order_item.supplier_id = part_supplier.supplier_id\n)\nselect \n    *\nfrom\n    final\norder by\n    order_date", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ro_exemplar.order_items", "model.ro_exemplar.part_suppliers"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["finance"], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "marts", "fct_order_items"], "unique_id": "model.ro_exemplar.fct_order_items", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "marts/fct_order_items.sql", "original_file_path": "models/marts/fct_order_items.sql", "name": "fct_order_items", "alias": "fct_order_items", "checksum": {"name": "sha256", "checksum": "304b4f7ab6dd4a2baed271b22be3e4b8b3ec25af462fbe410a8c045487be43d8"}, "tags": ["finance"], "refs": [["order_items"], ["part_suppliers"]], "sources": [], "description": "order items fact table", "columns": {"order_item_id": {"name": "order_item_id", "description": "surrogate key for the model -- combo of order_id + line_number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "foreign id for orders", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "foreign id for customers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "part_id": {"name": "part_id", "description": "foreign id for part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "supplier_id": {"name": "supplier_id", "description": "foreign id for suppliers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_item_status_code": {"name": "order_item_status_code", "description": "status of the order item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "return_flag": {"name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_number": {"name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ship_date": {"name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "quote": null, "tags": []}, "commit_date": {"name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_date": {"name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ship_mode": {"name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "quote": null, "tags": []}, "supplier_cost": {"name": "supplier_cost", "description": "raw cost", "meta": {}, "data_type": null, "quote": null, "tags": []}, "base_price": {"name": "base_price", "description": "since extended_price is the line item total, we back out the price per item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_percentage": {"name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discounted_price": {"name": "discounted_price", "description": "factoring in the discount_percentage, the line item discount total", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_item_count": {"name": "order_item_count", "description": "count of order items", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "total units", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gross_item_sales_amount": {"name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discounted_item_sales_amount": {"name": "discounted_item_sales_amount", "description": "line item (includes quantity) discount amount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_discount_amount": {"name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_tax_amount": {"name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_item_sales_amount": {"name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/marts/core.yml", "compiled_path": "target/compiled/ro_exemplar/models/marts/fct_order_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["finance"]}, "created_at": 1638724205, "compiled_sql": "\n\nwith order_item as (\n    \n    select * from \"postgres\".\"baseschema\".\"order_items\"\n\n),\npart_supplier as (\n    \n    select * from \"postgres\".\"baseschema\".\"part_suppliers\"\n\n),\nfinal as (\n    select \n        order_item.order_item_id,\n        order_item.order_id,\n        order_item.order_date,\n        order_item.customer_id,\n        order_item.part_id,\n        order_item.supplier_id,\n        order_item.order_item_status_code,\n        order_item.return_flag,\n        order_item.line_number,\n        order_item.ship_date,\n        order_item.commit_date,\n        order_item.receipt_date,\n        order_item.ship_mode,\n        part_supplier.cost as supplier_cost,\n        \n        order_item.base_price,\n        order_item.discount_percentage,\n        order_item.discounted_price,\n        order_item.tax_rate,\n        \n        1 as order_item_count,\n        order_item.quantity,\n        order_item.gross_item_sales_amount,\n        order_item.discounted_item_sales_amount,\n        order_item.item_discount_amount,\n        order_item.item_tax_amount,\n        order_item.net_item_sales_amount\n\n    from\n        order_item\n        inner join part_supplier\n            on order_item.part_id = part_supplier.part_id and\n                order_item.supplier_id = part_supplier.supplier_id\n)\nselect \n    *\nfrom\n    final\norder by\n    order_date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"fct_order_items\""}, "model.ro_exemplar.fct_orders": {"raw_sql": "{{\n    config(\n        materialized = 'table',\n        tags=['finance']\n    )\n}}\n\nwith orders as (\n    \n    select * from {{ ref('stg_tpch_orders') }} \n\n),\norder_item as (\n    \n    select * from {{ ref('order_items') }}\n\n),\norder_item_summary as (\n\n    select \n        order_id,\n        sum(gross_item_sales_amount) as gross_item_sales_amount,\n        sum(item_discount_amount) as item_discount_amount,\n        sum(item_tax_amount) as item_tax_amount,\n        sum(net_item_sales_amount) as net_item_sales_amount\n    from order_item\n    group by\n        1\n),\nfinal as (\n\n    select \n\n        orders.order_id, \n        orders.order_date,\n        orders.customer_id,\n        orders.status_code,\n        orders.priority_code,\n        orders.clerk_name,\n        orders.ship_priority,\n                \n        1 as order_count,                \n        order_item_summary.gross_item_sales_amount,\n        order_item_summary.item_discount_amount,\n        order_item_summary.item_tax_amount,\n        order_item_summary.net_item_sales_amount\n    from\n        orders\n        inner join order_item_summary\n            on orders.order_id = order_item_summary.order_id\n)\nselect \n    *\nfrom\n    final\n\norder by\n    order_date", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ro_exemplar.stg_tpch_orders", "model.ro_exemplar.order_items"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["finance"], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "marts", "fct_orders"], "unique_id": "model.ro_exemplar.fct_orders", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "marts/fct_orders.sql", "original_file_path": "models/marts/fct_orders.sql", "name": "fct_orders", "alias": "fct_orders", "checksum": {"name": "sha256", "checksum": "b4cb5154e614eb49212f3599c55f3eed28be7bf28522c8a292ba6e42f3c58620"}, "tags": ["finance"], "refs": [["stg_tpch_orders"], ["order_items"]], "sources": [], "description": "orders fact table", "columns": {"order_id": {"name": "order_id", "description": "primary id of the model", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "foreign id for customers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "date of the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "status of the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority_code": {"name": "priority_code", "description": "code associated with the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clerk_name": {"name": "clerk_name", "description": "id of the clerk", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ship_priority": {"name": "ship_priority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_count": {"name": "order_count", "description": "count of order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gross_item_sales_amount": {"name": "gross_item_sales_amount", "description": "same as extended_price", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_discount_amount": {"name": "item_discount_amount", "description": "item level discount amount. this is always a negative number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "item_tax_amount": {"name": "item_tax_amount", "description": "item level tax total", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_item_sales_amount": {"name": "net_item_sales_amount", "description": "the net total which factors in discount and tax", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/marts/core.yml", "compiled_path": "target/compiled/ro_exemplar/models/marts/fct_orders.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["finance"]}, "created_at": 1638724205, "compiled_sql": "\n\nwith orders as (\n    \n    select * from \"postgres\".\"baseschema\".\"stg_tpch_orders\" \n\n),\norder_item as (\n    \n    select * from \"postgres\".\"baseschema\".\"order_items\"\n\n),\norder_item_summary as (\n\n    select \n        order_id,\n        sum(gross_item_sales_amount) as gross_item_sales_amount,\n        sum(item_discount_amount) as item_discount_amount,\n        sum(item_tax_amount) as item_tax_amount,\n        sum(net_item_sales_amount) as net_item_sales_amount\n    from order_item\n    group by\n        1\n),\nfinal as (\n\n    select \n\n        orders.order_id, \n        orders.order_date,\n        orders.customer_id,\n        orders.status_code,\n        orders.priority_code,\n        orders.clerk_name,\n        orders.ship_priority,\n                \n        1 as order_count,                \n        order_item_summary.gross_item_sales_amount,\n        order_item_summary.item_discount_amount,\n        order_item_summary.item_tax_amount,\n        order_item_summary.net_item_sales_amount\n    from\n        orders\n        inner join order_item_summary\n            on orders.order_id = order_item_summary.order_id\n)\nselect \n    *\nfrom\n    final\n\norder by\n    order_date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"fct_orders\""}, "model.ro_exemplar.dim_parts": {"raw_sql": "{{\n    config(\n        materialized = 'table'\n    )\n}}\nwith part as (\n\n    select * from {{ref('stg_tpch_parts')}}\n\n),\n\nfinal as (\n    select \n        part_id,\n        manufacturer,\n        name,\n        brand,\n        type,\n        size,\n        container,\n        retail_price\n    from\n        part\n)\nselect *\nfrom final  \norder by part_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ro_exemplar.stg_tpch_parts"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "marts", "dim_parts"], "unique_id": "model.ro_exemplar.dim_parts", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "marts/dim_parts.sql", "original_file_path": "models/marts/dim_parts.sql", "name": "dim_parts", "alias": "dim_parts", "checksum": {"name": "sha256", "checksum": "d27fa72418ee167cb4717286b0c04dccfc6f2c3845061d9772d94bf5d5ab8a75"}, "tags": [], "refs": [["stg_tpch_parts"]], "sources": [], "description": "Parts dimensions table", "columns": {"part_id": {"name": "part_id", "description": "primary id of the model", "meta": {}, "data_type": null, "quote": null, "tags": []}, "manufacturer": {"name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "name of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "type of part including material", "meta": {}, "data_type": null, "quote": null, "tags": []}, "size": {"name": "size", "description": "size of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "container": {"name": "container", "description": "container of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "retail_price": {"name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/marts/core.yml", "compiled_path": "target/compiled/ro_exemplar/models/marts/dim_parts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1638724204, "compiled_sql": "\nwith part as (\n\n    select * from \"postgres\".\"baseschema\".\"stg_tpch_parts\"\n\n),\n\nfinal as (\n    select \n        part_id,\n        manufacturer,\n        name,\n        brand,\n        type,\n        size,\n        container,\n        retail_price\n    from\n        part\n)\nselect *\nfrom final  \norder by part_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"dim_parts\""}, "model.ro_exemplar.agg_ship_modes_hardcoded_pivot": {"raw_sql": "/* Create a pivot table with dynamic columns based on the ship modes that are in the system */\n\n{%- call statement('result', fetch_result=True) -%}\n\n    {# this pulls the unique ship modes from the fct_order_items table #}\n    select 'dummy'\n\n{%- endcall %}\n\n{% if execute %}\n{% set ship_modes = load_result('result').table.columns[0].values() %}\n{% else %}\n{% set ship_modes = [] %}\n{% endif %}\n\nselect\n    date_part('year', order_date) as order_year,\n\n    {# Loop over ship_modes array from above, and sum based on whether the record matches the ship mode #}\n    {%- for ship_mode in ship_modes -%}\n        sum(case when ship_mode = '{{ship_mode}}' then gross_item_sales_amount end) as \"{{ship_mode|replace(' ', '_')}}_amount\"\n        {%- if not loop.last -%},{% endif %}\n    {% endfor %}\n\nfrom {{ ref('fct_order_items') }}\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.statement"], "nodes": ["model.ro_exemplar.fct_order_items"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "marts", "aggregates", "agg_ship_modes_hardcoded_pivot"], "unique_id": "model.ro_exemplar.agg_ship_modes_hardcoded_pivot", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "marts/aggregates/agg_ship_modes_hardcoded_pivot.sql", "original_file_path": "models/marts/aggregates/agg_ship_modes_hardcoded_pivot.sql", "name": "agg_ship_modes_hardcoded_pivot", "alias": "agg_ship_modes_hardcoded_pivot", "checksum": {"name": "sha256", "checksum": "5a8623deda7305616a2d7e0c41a29856fbaa426e314e7edf36e284238852b7b0"}, "tags": [], "refs": [["fct_order_items"]], "sources": [], "description": "Example of creating a pivot table with dynamic columns based on the ship modes that are in the system", "columns": {"order_year": {"name": "order_year", "description": "year of the order", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/marts/aggregates/aggregates.yml", "compiled_path": "target/compiled/ro_exemplar/models/marts/aggregates/agg_ship_modes_hardcoded_pivot.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "/* Create a pivot table with dynamic columns based on the ship modes that are in the system */\n\n\n\n\n\nselect\n    date_part('year', order_date) as order_year,\n\n    sum(case when ship_mode = 'dummy' then gross_item_sales_amount end) as \"dummy_amount\"\n    \n\nfrom \"postgres\".\"baseschema\".\"fct_order_items\"\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"agg_ship_modes_hardcoded_pivot\""}, "model.ro_exemplar.agg_regions_segments": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n\nwith\n\ncustomers as (\n    select * from {{ ref('dim_customers') }}\n),\n\norders as (\n    select * from {{ ref('fct_orders') }}\n),\n\nagg_orders as (\n    select\n        customer_id,\n        sum(net_item_sales_amount) as total_sales\n    from orders\n    group by 1\n),\n\nfinal as (\n    select\n        customers.region,\n        customers.market_segment,\n        round(sum(agg_orders.total_sales),2) as total_sales\n    from customers\n    left join agg_orders on customers.customer_id = agg_orders.customer_id\n    group by 1, 2\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ro_exemplar.dim_customers", "model.ro_exemplar.fct_orders"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "marts", "aggregates", "agg_regions_segments"], "unique_id": "model.ro_exemplar.agg_regions_segments", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "marts/aggregates/agg_regions_segments.sql", "original_file_path": "models/marts/aggregates/agg_regions_segments.sql", "name": "agg_regions_segments", "alias": "agg_regions_segments", "checksum": {"name": "sha256", "checksum": "d1b74ea226c1f8b20f9d55060316e431321dce78ff543e91a2579cf5df6726e6"}, "tags": [], "refs": [["dim_customers"], ["fct_orders"]], "sources": [], "description": "Aggregated model by region and segment.", "columns": {"region": {"name": "region", "description": "One of the five global regions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "market_segment": {"name": "market_segment", "description": "One of the five market segments.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "Total sales for the region and market segment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/marts/aggregates/aggregates.yml", "compiled_path": "target/compiled/ro_exemplar/models/marts/aggregates/agg_regions_segments.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1638724205, "compiled_sql": "\n\nwith\n\ncustomers as (\n    select * from \"postgres\".\"baseschema\".\"dim_customers\"\n),\n\norders as (\n    select * from \"postgres\".\"baseschema\".\"fct_orders\"\n),\n\nagg_orders as (\n    select\n        customer_id,\n        sum(net_item_sales_amount) as total_sales\n    from orders\n    group by 1\n),\n\nfinal as (\n    select\n        customers.region,\n        customers.market_segment,\n        round(sum(agg_orders.total_sales),2) as total_sales\n    from customers\n    left join agg_orders on customers.customer_id = agg_orders.customer_id\n    group by 1, 2\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"agg_regions_segments\""}, "model.ro_exemplar.agg_ship_modes_dynamic_pivot": {"raw_sql": "/* Create a pivot table with dynamic columns based on the ship modes that are in the system */\n\n{%- call statement('result', fetch_result=True) -%}\n\n    {# this pulls the unique ship modes from the fct_order_items table #}\n    select 'dummy'\n\n{%- endcall %}\n\n{% if execute %}\n{% set ship_modes = load_result('result').table.columns[0].values() %}\n{% else %}\n{% set ship_modes = [] %}\n{% endif %}\n\nselect\n    date_part('year', order_date) as order_year,\n\n    {# Loop over ship_modes array from above, and sum based on whether the record matches the ship mode #}\n    {%- for ship_mode in ship_modes -%}\n        sum(case when ship_mode = '{{ship_mode}}' then gross_item_sales_amount end) as \"{{ship_mode|replace(' ', '_')}}_amount\"\n        {%- if not loop.last -%},{% endif %}\n    {% endfor %}\n\nfrom {{ ref('fct_order_items') }}\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.statement"], "nodes": ["model.ro_exemplar.fct_order_items"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "marts", "aggregates", "agg_ship_modes_dynamic_pivot"], "unique_id": "model.ro_exemplar.agg_ship_modes_dynamic_pivot", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "marts/aggregates/agg_ship_modes_dynamic_pivot.sql", "original_file_path": "models/marts/aggregates/agg_ship_modes_dynamic_pivot.sql", "name": "agg_ship_modes_dynamic_pivot", "alias": "agg_ship_modes_dynamic_pivot", "checksum": {"name": "sha256", "checksum": "5a8623deda7305616a2d7e0c41a29856fbaa426e314e7edf36e284238852b7b0"}, "tags": [], "refs": [["fct_order_items"]], "sources": [], "description": "Example of creating a pivot table with hard-coded columns based on a query of the ship modes that are in the system", "columns": {"order_year": {"name": "order_year", "description": "year of the order", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/marts/aggregates/aggregates.yml", "compiled_path": "target/compiled/ro_exemplar/models/marts/aggregates/agg_ship_modes_dynamic_pivot.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "/* Create a pivot table with dynamic columns based on the ship modes that are in the system */\n\n\n\n\n\nselect\n    date_part('year', order_date) as order_year,\n\n    sum(case when ship_mode = 'dummy' then gross_item_sales_amount end) as \"dummy_amount\"\n    \n\nfrom \"postgres\".\"baseschema\".\"fct_order_items\"\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"agg_ship_modes_dynamic_pivot\""}, "model.ro_exemplar.stg_tpch_orders": {"raw_sql": "with source as (\n\n    select * from {{ source('tpch', 'orders') }}\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        o_orderkey as order_id,\n        o_custkey as customer_id,\n        \n        -- descriptions\n        o_comment as comment,\n        o_clerk as clerk_name,\n\n        -- numbers\n        o_totalprice as total_price,\n\n        -- statuses\n        o_orderstatus as status_code,\n        o_orderpriority as priority_code,\n        o_shippriority as ship_priority,\n\n        -- dates\n        o_orderdate as order_date\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ro_exemplar.tpch.orders"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "staging", "tpch", "stg_tpch_orders"], "unique_id": "model.ro_exemplar.stg_tpch_orders", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch_orders.sql", "original_file_path": "models/staging/tpch/stg_tpch_orders.sql", "name": "stg_tpch_orders", "alias": "stg_tpch_orders", "checksum": {"name": "sha256", "checksum": "af427ca15a663b21b171a075f9bde5f1a302586856aadabb56a9813c0a255a5c"}, "tags": [], "refs": [], "sources": [["tpch", "orders"]], "description": "staging layer for orders data", "columns": {"order_id": {"name": "order_id", "description": "primary id of the model", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "foreign id to stg_tpch_customers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "status of the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_price": {"name": "total_price", "description": "raw price", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "date the order was made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority_code": {"name": "priority_code", "description": "code associated with the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clerk_name": {"name": "clerk_name", "description": "id of the clerk", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ship_priority": {"name": "ship_priority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/staging/tpch/schema.yml", "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/stg_tpch_orders.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1638724205, "compiled_sql": "with source as (\n\n    select * from \"snowflake_sample_data\".\"tpch_sf1\".\"orders\"\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        o_orderkey as order_id,\n        o_custkey as customer_id,\n        \n        -- descriptions\n        o_comment as comment,\n        o_clerk as clerk_name,\n\n        -- numbers\n        o_totalprice as total_price,\n\n        -- statuses\n        o_orderstatus as status_code,\n        o_orderpriority as priority_code,\n        o_shippriority as ship_priority,\n\n        -- dates\n        o_orderdate as order_date\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"stg_tpch_orders\""}, "model.ro_exemplar.stg_tpch_nations": {"raw_sql": "with source as (\n\n    select * from {{ source('tpch', 'nation') }}\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        n_nationkey as nation_id,\n        n_regionkey as region_id,\n\n        -- descriptions\n        n_name as name,\n        n_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ro_exemplar.tpch.nation"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "staging", "tpch", "stg_tpch_nations"], "unique_id": "model.ro_exemplar.stg_tpch_nations", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch_nations.sql", "original_file_path": "models/staging/tpch/stg_tpch_nations.sql", "name": "stg_tpch_nations", "alias": "stg_tpch_nations", "checksum": {"name": "sha256", "checksum": "93203715e6aceaafbc33926619df6aac33dd6975cf3705b41b186e52e711f11c"}, "tags": [], "refs": [], "sources": [["tpch", "nation"]], "description": "staging layer for nations data", "columns": {"nation_id": {"name": "nation_id", "description": "primary id of the model", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "nation name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "region_id": {"name": "region_id", "description": "foreign id to stg_tpch_regions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/staging/tpch/schema.yml", "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/stg_tpch_nations.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1638724205, "compiled_sql": "with source as (\n\n    select * from \"snowflake_sample_data\".\"tpch_sf1\".\"nation\"\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        n_nationkey as nation_id,\n        n_regionkey as region_id,\n\n        -- descriptions\n        n_name as name,\n        n_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"stg_tpch_nations\""}, "model.ro_exemplar.stg_tpch_regions": {"raw_sql": "with source as (\n\n    select * from {{ source('tpch', 'region') }}\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        r_regionkey as region_id,\n\n        -- descriptions\n        r_name as name,\n        r_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ro_exemplar.tpch.region"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "staging", "tpch", "stg_tpch_regions"], "unique_id": "model.ro_exemplar.stg_tpch_regions", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch_regions.sql", "original_file_path": "models/staging/tpch/stg_tpch_regions.sql", "name": "stg_tpch_regions", "alias": "stg_tpch_regions", "checksum": {"name": "sha256", "checksum": "4c2fbb804007b1c191b1119a94963c14be68918d903148b3e711b69a5e6eb391"}, "tags": [], "refs": [], "sources": [["tpch", "region"]], "description": "staging layer for regions data", "columns": {"region_id": {"name": "region_id", "description": "primary id of the model", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "region name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/staging/tpch/schema.yml", "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/stg_tpch_regions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1638724205, "compiled_sql": "with source as (\n\n    select * from \"snowflake_sample_data\".\"tpch_sf1\".\"region\"\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        r_regionkey as region_id,\n\n        -- descriptions\n        r_name as name,\n        r_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"stg_tpch_regions\""}, "model.ro_exemplar.stg_tpch_customers": {"raw_sql": "with source as (\n\n    select * from {{ source('tpch', 'customer') }}\n\n),\n\nrenamed as (\n\n    select\n        -- ids\n        c_custkey as customer_id,\n        c_nationkey as nation_id,\n\n        -- descriptions\n        c_name as name,\n        c_address as address,\n        c_phone as phone_number,\n        c_acctbal as account_balance,\n        c_mktsegment as market_segment,\n        c_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ro_exemplar.tpch.customer"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "staging", "tpch", "stg_tpch_customers"], "unique_id": "model.ro_exemplar.stg_tpch_customers", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch_customers.sql", "original_file_path": "models/staging/tpch/stg_tpch_customers.sql", "name": "stg_tpch_customers", "alias": "stg_tpch_customers", "checksum": {"name": "sha256", "checksum": "1217426e54360c999c166ac80ae76114087e3e4edd1c9b6399675add137e915b"}, "tags": [], "refs": [], "sources": [["tpch", "customer"]], "description": "staging layer for customers data", "columns": {"customer_id": {"name": "customer_id", "description": "primary id of the model", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "customer id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address": {"name": "address", "description": "address of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nation_id": {"name": "nation_id", "description": "foreign id to stg_tpch_nations", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "total account balance from the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "market_segment": {"name": "market_segment", "description": "market segment of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/staging/tpch/schema.yml", "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/stg_tpch_customers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1638724205, "compiled_sql": "with source as (\n\n    select * from \"snowflake_sample_data\".\"tpch_sf1\".\"customer\"\n\n),\n\nrenamed as (\n\n    select\n        -- ids\n        c_custkey as customer_id,\n        c_nationkey as nation_id,\n\n        -- descriptions\n        c_name as name,\n        c_address as address,\n        c_phone as phone_number,\n        c_acctbal as account_balance,\n        c_mktsegment as market_segment,\n        c_comment as comment\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"stg_tpch_customers\""}, "model.ro_exemplar.stg_tpch_suppliers": {"raw_sql": "with source as (\n\n    select * from {{ source('tpch', 'supplier') }}\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        s_suppkey as supplier_id,\n        s_nationkey as nation_id,\n\n        -- descriptions\n        s_name as supplier_name,\n        s_address as supplier_address,\n        s_phone as phone_number,\n        s_comment as comment,\n\n        -- amounts\n        s_acctbal as account_balance\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ro_exemplar.tpch.supplier"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "staging", "tpch", "stg_tpch_suppliers"], "unique_id": "model.ro_exemplar.stg_tpch_suppliers", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch_suppliers.sql", "original_file_path": "models/staging/tpch/stg_tpch_suppliers.sql", "name": "stg_tpch_suppliers", "alias": "stg_tpch_suppliers", "checksum": {"name": "sha256", "checksum": "4dc27da026aad998e964d6301c357e8d1d136aa2fdce5a360f652c250df38d15"}, "tags": [], "refs": [], "sources": [["tpch", "supplier"]], "description": "staging layer for suppliers data", "columns": {"supplier_id": {"name": "supplier_id", "description": "primary id of the model", "meta": {}, "data_type": null, "quote": null, "tags": []}, "supplier_name": {"name": "supplier_name", "description": "id of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "supplier_address": {"name": "supplier_address", "description": "address of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nation_id": {"name": "nation_id", "description": "foreign id to stg_tpch_nations", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "phone number of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/staging/tpch/schema.yml", "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/stg_tpch_suppliers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1638724205, "compiled_sql": "with source as (\n\n    select * from \"snowflake_sample_data\".\"tpch_sf1\".\"supplier\"\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        s_suppkey as supplier_id,\n        s_nationkey as nation_id,\n\n        -- descriptions\n        s_name as supplier_name,\n        s_address as supplier_address,\n        s_phone as phone_number,\n        s_comment as comment,\n\n        -- amounts\n        s_acctbal as account_balance\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"stg_tpch_suppliers\""}, "model.ro_exemplar.stg_tpch_parts": {"raw_sql": "with source as (\n\n    select * from {{ source('tpch', 'part') }}\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        p_partkey as part_id,\n        \n        -- descriptions\n        p_name as name,\n        p_type as type,\n        p_size as size,\n        p_mfgr as manufacturer,\n        p_brand as brand,\n        p_comment as comment,\n        p_container as container,\n\n        -- amounts\n        p_retailprice as retail_price\n        \n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ro_exemplar.tpch.part"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "staging", "tpch", "stg_tpch_parts"], "unique_id": "model.ro_exemplar.stg_tpch_parts", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch_parts.sql", "original_file_path": "models/staging/tpch/stg_tpch_parts.sql", "name": "stg_tpch_parts", "alias": "stg_tpch_parts", "checksum": {"name": "sha256", "checksum": "c98fcc89abddd01d835f8520cd4d0f71a24b8093c4168afaa5cec5b4bc1c6441"}, "tags": [], "refs": [], "sources": [["tpch", "part"]], "description": "staging layer for parts data", "columns": {"part_id": {"name": "part_id", "description": "primary id of the model", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "name of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "manufacturer": {"name": "manufacturer", "description": "manufacturer of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "brand of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "type of part including material", "meta": {}, "data_type": null, "quote": null, "tags": []}, "size": {"name": "size", "description": "size of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "container": {"name": "container", "description": "container of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "retail_price": {"name": "retail_price", "description": "raw retail price", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/staging/tpch/schema.yml", "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/stg_tpch_parts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1638724205, "compiled_sql": "with source as (\n\n    select * from \"snowflake_sample_data\".\"tpch_sf1\".\"part\"\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        p_partkey as part_id,\n        \n        -- descriptions\n        p_name as name,\n        p_type as type,\n        p_size as size,\n        p_mfgr as manufacturer,\n        p_brand as brand,\n        p_comment as comment,\n        p_container as container,\n\n        -- amounts\n        p_retailprice as retail_price\n        \n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"stg_tpch_parts\""}, "model.ro_exemplar.stg_tpch_line_items": {"raw_sql": "with source as (\n\n    select * from {{ source('tpch', 'lineitem') }}\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        {{ dbt_utils.surrogate_key(\n            ['l_orderkey', \n            'l_linenumber']) }}\n                as order_item_id,\n        l_orderkey as order_id,\n        l_partkey as part_id,\n        l_suppkey as supplier_id,\n\n        -- descriptions\n        l_linenumber as line_number,\n        l_comment as comment,\n        l_shipmode as ship_mode,\n        l_shipinstruct as ship_instructions,\n        \n        -- numbers\n        l_quantity as quantity,\n        l_extendedprice as extended_price,\n        l_discount as discount_percentage,\n        l_tax as tax_rate,\n        \n        -- status\n        l_linestatus as status_code,\n        l_returnflag as return_flag,\n        \n        -- dates\n        l_shipdate as ship_date,\n        l_commitdate as commit_date,\n        l_receiptdate as receipt_date\n\n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.ro_exemplar.tpch.lineitem"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "staging", "tpch", "stg_tpch_line_items"], "unique_id": "model.ro_exemplar.stg_tpch_line_items", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch_line_items.sql", "original_file_path": "models/staging/tpch/stg_tpch_line_items.sql", "name": "stg_tpch_line_items", "alias": "stg_tpch_line_items", "checksum": {"name": "sha256", "checksum": "af1eec39448147ea1aa0af929d1edbb90350b006f6e10f6ca11a7daf8f9d21da"}, "tags": [], "refs": [], "sources": [["tpch", "lineitem"]], "description": "staging layer for line items data", "columns": {"order_item_id": {"name": "order_item_id", "description": "surrogate key for the model -- combo of order_id + line_number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_id": {"name": "order_id", "description": "foreign id to stg_tpch_orders", "meta": {}, "data_type": null, "quote": null, "tags": []}, "part_id": {"name": "part_id", "description": "foreign id to stg_tpch_part_suppliers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "supplier_id": {"name": "supplier_id", "description": "foreign id to stg_tpch_suppliers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_number": {"name": "line_number", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "total units", "meta": {}, "data_type": null, "quote": null, "tags": []}, "extended_price": {"name": "extended_price", "description": "line item price", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_percentage": {"name": "discount_percentage", "description": "percentage of the discount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "tax rate of the order item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "return_flag": {"name": "return_flag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "status code of the order item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ship_date": {"name": "ship_date", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "quote": null, "tags": []}, "commit_date": {"name": "commit_date", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_date": {"name": "receipt_date", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ship_instructions": {"name": "ship_instructions", "description": "additional instructions on the shipment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ship_mode": {"name": "ship_mode", "description": "method of shipping", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/staging/tpch/schema.yml", "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/stg_tpch_line_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1638724205, "compiled_sql": "with source as (\n\n    select * from \"snowflake_sample_data\".\"tpch_sf1\".\"lineitem\"\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        md5(cast(coalesce(cast(l_orderkey as \n    varchar\n), '') || '-' || coalesce(cast(l_linenumber as \n    varchar\n), '') as \n    varchar\n))\n                as order_item_id,\n        l_orderkey as order_id,\n        l_partkey as part_id,\n        l_suppkey as supplier_id,\n\n        -- descriptions\n        l_linenumber as line_number,\n        l_comment as comment,\n        l_shipmode as ship_mode,\n        l_shipinstruct as ship_instructions,\n        \n        -- numbers\n        l_quantity as quantity,\n        l_extendedprice as extended_price,\n        l_discount as discount_percentage,\n        l_tax as tax_rate,\n        \n        -- status\n        l_linestatus as status_code,\n        l_returnflag as return_flag,\n        \n        -- dates\n        l_shipdate as ship_date,\n        l_commitdate as commit_date,\n        l_receiptdate as receipt_date\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"stg_tpch_line_items\""}, "model.ro_exemplar.stg_tpch_part_suppliers": {"raw_sql": "with source as (\n\n    select * from {{ source('tpch', 'partsupp') }}\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        {{ dbt_utils.surrogate_key(\n            ['ps_partkey', \n            'ps_suppkey']) }} \n                as part_supplier_id,\n        ps_partkey as part_id,\n        ps_suppkey as supplier_id,\n\n        -- descriptions\n        ps_comment as comment,\n\n        -- amounts\n        ps_availqty as available_quantity,\n        ps_supplycost as cost\n        \n    from source\n\n)\n\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["source.ro_exemplar.tpch.partsupp"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "staging", "tpch", "stg_tpch_part_suppliers"], "unique_id": "model.ro_exemplar.stg_tpch_part_suppliers", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch_part_suppliers.sql", "original_file_path": "models/staging/tpch/stg_tpch_part_suppliers.sql", "name": "stg_tpch_part_suppliers", "alias": "stg_tpch_part_suppliers", "checksum": {"name": "sha256", "checksum": "265506754815369772340fdb387df06680375b67aa8b4294a7bae207c7d89771"}, "tags": [], "refs": [], "sources": [["tpch", "partsupp"]], "description": "staging layer for suppliers data", "columns": {"part_supplier_id": {"name": "part_supplier_id", "description": "surrogate id for the model -- combo of ps_partid + ps_suppid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "part_id": {"name": "part_id", "description": "foreign id to stg_tpch_parts", "meta": {}, "data_type": null, "quote": null, "tags": []}, "supplier_id": {"name": "supplier_id", "description": "foreign id to stg_tpch_suppliers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "available_quantity": {"name": "available_quantity", "description": "raw available quantity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cost": {"name": "cost", "description": "raw cost", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ro_exemplar://models/staging/tpch/schema.yml", "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/stg_tpch_part_suppliers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1638724205, "compiled_sql": "with source as (\n\n    select * from \"snowflake_sample_data\".\"tpch_sf1\".\"partsupp\"\n\n),\n\nrenamed as (\n\n    select\n\n        -- ids\n        md5(cast(coalesce(cast(ps_partkey as \n    varchar\n), '') || '-' || coalesce(cast(ps_suppkey as \n    varchar\n), '') as \n    varchar\n)) \n                as part_supplier_id,\n        ps_partkey as part_id,\n        ps_suppkey as supplier_id,\n\n        -- descriptions\n        ps_comment as comment,\n\n        -- amounts\n        ps_availqty as available_quantity,\n        ps_supplycost as cost\n        \n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"baseschema\".\"stg_tpch_part_suppliers\""}, "analysis.ro_exemplar.legacy_q3_shipping_priority_query": {"raw_sql": "{# parameterize the following variables #}\n{% set segment = 'BUILDING' %}\n{% set date = '1995-03-15' %}\n\nselect\n    l_orderkey,\n    sum(l_extendedprice*(1-l_discount)) as revenue,\n    o_orderdate,\n    o_shippriority\nfrom\n    snowflake_sample_data.tpch_sf1.customer,\n    snowflake_sample_data.tpch_sf1.orders,\n    snowflake_sample_data.tpch_sf1.lineitem\nwhere\n    c_mktsegment = '{{ segment }}'\n    and c_custkey = o_custkey\n    and l_orderkey = o_orderkey\n    and o_orderdate < to_date('{{ date }}')\n    and l_shipdate > to_date('{{ date }}')\ngroup by\n    l_orderkey,\n    o_orderdate,\n    o_shippriority\norder by\n    revenue desc,\n    o_orderdate", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "analysis", "legacy_tpch", "legacy_q3_shipping_priority_query"], "unique_id": "analysis.ro_exemplar.legacy_q3_shipping_priority_query", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "analysis/legacy_tpch/legacy_q3_shipping_priority_query.sql", "original_file_path": "analysis/legacy_tpch/legacy_q3_shipping_priority_query.sql", "name": "legacy_q3_shipping_priority_query", "alias": "legacy_q3_shipping_priority_query", "checksum": {"name": "sha256", "checksum": "a9e70095cc05cc6c0aab68aef2ae2cbcc599ce27a904dd60fd8ff8ba8a766005"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/analysis/legacy_tpch/legacy_q3_shipping_priority_query.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724204, "compiled_sql": "\n\n\n\nselect\n    l_orderkey,\n    sum(l_extendedprice*(1-l_discount)) as revenue,\n    o_orderdate,\n    o_shippriority\nfrom\n    snowflake_sample_data.tpch_sf1.customer,\n    snowflake_sample_data.tpch_sf1.orders,\n    snowflake_sample_data.tpch_sf1.lineitem\nwhere\n    c_mktsegment = 'BUILDING'\n    and c_custkey = o_custkey\n    and l_orderkey = o_orderkey\n    and o_orderdate < to_date('1995-03-15')\n    and l_shipdate > to_date('1995-03-15')\ngroup by\n    l_orderkey,\n    o_orderdate,\n    o_shippriority\norder by\n    revenue desc,\n    o_orderdate", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.ro_exemplar.legacy_q1_pricing_summary": {"raw_sql": "{# parameterize the following variables #}\n{% set delta = 90 %}\n\nselect\n      l_returnflag,\n      l_linestatus,\n      sum(l_quantity) as sum_qty,\n      sum(l_extendedprice) as sum_base_price,\n      sum(l_extendedprice*(1-l_discount)) as sum_disc_price,\n      sum(l_extendedprice*(1-l_discount)*(1+l_tax)) as sum_charge,\n      avg(l_quantity) as avg_qty,\n      avg(l_extendedprice) as avg_price,\n      avg(l_discount) as avg_disc,\n      count(*) as count_order\nfrom\n      snowflake_sample_data.tpch_sf1.lineitem\nwhere\n      l_shipdate <= dateadd(day, {{ delta }}, to_date('1998-12-01')) \ngroup by\n      l_returnflag,\n      l_linestatus\norder by\n      l_returnflag,\n      l_linestatus", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "analysis", "legacy_tpch", "legacy_q1_pricing_summary"], "unique_id": "analysis.ro_exemplar.legacy_q1_pricing_summary", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "analysis/legacy_tpch/legacy_q1_pricing_summary.sql", "original_file_path": "analysis/legacy_tpch/legacy_q1_pricing_summary.sql", "name": "legacy_q1_pricing_summary", "alias": "legacy_q1_pricing_summary", "checksum": {"name": "sha256", "checksum": "572a8cd4e76a79fbfc40be69637220e6499c2e8507b804bb7fa2f5be4831e18e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/analysis/legacy_tpch/legacy_q1_pricing_summary.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724204, "compiled_sql": "\n\n\nselect\n      l_returnflag,\n      l_linestatus,\n      sum(l_quantity) as sum_qty,\n      sum(l_extendedprice) as sum_base_price,\n      sum(l_extendedprice*(1-l_discount)) as sum_disc_price,\n      sum(l_extendedprice*(1-l_discount)*(1+l_tax)) as sum_charge,\n      avg(l_quantity) as avg_qty,\n      avg(l_extendedprice) as avg_price,\n      avg(l_discount) as avg_disc,\n      count(*) as count_order\nfrom\n      snowflake_sample_data.tpch_sf1.lineitem\nwhere\n      l_shipdate <= dateadd(day, 90, to_date('1998-12-01')) \ngroup by\n      l_returnflag,\n      l_linestatus\norder by\n      l_returnflag,\n      l_linestatus", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.ro_exemplar.legacy_q2_minimum_cost_supplier": {"raw_sql": "{# parameterize the following variables #}\n{% set size = 15 %}\n{% set type = 'BRASS' %}\n{% set region = 'EUROPE' %}\n\nselect\n    s_acctbal,\n    s_name,\n    n_name,\n    p_partkey,\n    p_mfgr,\n    s_address,\n    s_phone,\n    s_comment\nfrom\n    snowflake_sample_data.tpch_sf1.part,\n    snowflake_sample_data.tpch_sf1.supplier,\n    snowflake_sample_data.tpch_sf1.partsupp,\n    snowflake_sample_data.tpch_sf1.nation,\n    snowflake_sample_data.tpch_sf1.region\nwhere\n    p_partkey = ps_partkey\n    and s_suppkey = ps_suppkey\n    and p_size = {{ size }}\n    and p_type like '%{{ type }}'\n    and s_nationkey = n_nationkey\n    and n_regionkey = r_regionkey\n    and r_name = '{{ region }}'\n    and ps_supplycost = (\n        select \n            min(ps_supplycost)\n        from\n            snowflake_sample_data.tpch_sf1.partsupp, snowflake_sample_data.tpch_sf1.supplier,\n            snowflake_sample_data.tpch_sf1.nation, snowflake_sample_data.tpch_sf1.region\n        where\n            p_partkey = ps_partkey\n            and s_suppkey = ps_suppkey\n            and s_nationkey = n_nationkey\n            and n_regionkey = r_regionkey\n            and r_name = '{{ region }}'\n    )\norder by\n    s_acctbal desc,\n    n_name,\n    s_name,\n    p_partkey", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "analysis", "legacy_tpch", "legacy_q2_minimum_cost_supplier"], "unique_id": "analysis.ro_exemplar.legacy_q2_minimum_cost_supplier", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "analysis/legacy_tpch/legacy_q2_minimum_cost_supplier.sql", "original_file_path": "analysis/legacy_tpch/legacy_q2_minimum_cost_supplier.sql", "name": "legacy_q2_minimum_cost_supplier", "alias": "legacy_q2_minimum_cost_supplier", "checksum": {"name": "sha256", "checksum": "fc1b2368d724c337b48b723ab1d8581df9db3e4ee628705b6aef51c46c9a5af7"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/analysis/legacy_tpch/legacy_q2_minimum_cost_supplier.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724204, "compiled_sql": "\n\n\n\n\nselect\n    s_acctbal,\n    s_name,\n    n_name,\n    p_partkey,\n    p_mfgr,\n    s_address,\n    s_phone,\n    s_comment\nfrom\n    snowflake_sample_data.tpch_sf1.part,\n    snowflake_sample_data.tpch_sf1.supplier,\n    snowflake_sample_data.tpch_sf1.partsupp,\n    snowflake_sample_data.tpch_sf1.nation,\n    snowflake_sample_data.tpch_sf1.region\nwhere\n    p_partkey = ps_partkey\n    and s_suppkey = ps_suppkey\n    and p_size = 15\n    and p_type like '%BRASS'\n    and s_nationkey = n_nationkey\n    and n_regionkey = r_regionkey\n    and r_name = 'EUROPE'\n    and ps_supplycost = (\n        select \n            min(ps_supplycost)\n        from\n            snowflake_sample_data.tpch_sf1.partsupp, snowflake_sample_data.tpch_sf1.supplier,\n            snowflake_sample_data.tpch_sf1.nation, snowflake_sample_data.tpch_sf1.region\n        where\n            p_partkey = ps_partkey\n            and s_suppkey = ps_suppkey\n            and s_nationkey = n_nationkey\n            and n_regionkey = r_regionkey\n            and r_name = 'EUROPE'\n    )\norder by\n    s_acctbal desc,\n    n_name,\n    s_name,\n    p_partkey", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.ro_exemplar.legacy_q4_order_priority_checking": {"raw_sql": "{# parameterize the following variables #}\n{% set date = '1993-07-01' %}\n\nselect\n    o_orderpriority,\n    count(*) as order_count\nfrom\n    snowflake_sample_data.tpch_sf1.orders\nwhere\n    o_orderdate >= date '{{ date }}'\n    and o_orderdate < dateadd(month, 3, to_date('{{ date }}')) \n    and exists (\n        select\n            *\n        from\n            snowflake_sample_data.tpch_sf1.lineitem\n        where\n            l_orderkey = o_orderkey\n            and l_commitdate < l_receiptdate\n    )\ngroup by\n    o_orderpriority\norder by\n    o_orderpriority", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "analysis", "legacy_tpch", "legacy_q4_order_priority_checking"], "unique_id": "analysis.ro_exemplar.legacy_q4_order_priority_checking", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "analysis/legacy_tpch/legacy_q4_order_priority_checking.sql", "original_file_path": "analysis/legacy_tpch/legacy_q4_order_priority_checking.sql", "name": "legacy_q4_order_priority_checking", "alias": "legacy_q4_order_priority_checking", "checksum": {"name": "sha256", "checksum": "d19967a472fad3ef2d1a1e126e87cccc79606e2a9793a8cbcf3558de26e8b5c5"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/analysis/legacy_tpch/legacy_q4_order_priority_checking.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724204, "compiled_sql": "\n\n\nselect\n    o_orderpriority,\n    count(*) as order_count\nfrom\n    snowflake_sample_data.tpch_sf1.orders\nwhere\n    o_orderdate >= date '1993-07-01'\n    and o_orderdate < dateadd(month, 3, to_date('1993-07-01')) \n    and exists (\n        select\n            *\n        from\n            snowflake_sample_data.tpch_sf1.lineitem\n        where\n            l_orderkey = o_orderkey\n            and l_commitdate < l_receiptdate\n    )\ngroup by\n    o_orderpriority\norder by\n    o_orderpriority", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.ro_exemplar.legacy_q5_local_supplier_volume": {"raw_sql": "{# parameterize the following variables #}\n{% set region = 'ASIA' %}\n{% set date = '1994-01-01' %}\n\n\nselect\n    n_name,\n    sum(l_extendedprice * (1 - l_discount)) as revenue\nfrom\n    snowflake_sample_data.tpch_sf1.customer,\n    snowflake_sample_data.tpch_sf1.orders,\n    snowflake_sample_data.tpch_sf1.lineitem,\n    snowflake_sample_data.tpch_sf1.supplier,\n    snowflake_sample_data.tpch_sf1.nation,\n    snowflake_sample_data.tpch_sf1.region\nwhere\n    c_custkey = o_custkey\n    and l_orderkey = o_orderkey\n    and l_suppkey = s_suppkey\n    and c_nationkey = s_nationkey\n    and s_nationkey = n_nationkey\n    and n_regionkey = r_regionkey\n    and r_name = '{{ region }}'\n    and o_orderdate >= to_date('{{ date }}')\n    and o_orderdate < dateadd(year, 1, to_date('{{ date }}')) \ngroup by\n    n_name\norder by\n    revenue desc", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema", "fqn": ["ro_exemplar", "analysis", "legacy_tpch", "legacy_q5_local_supplier_volume"], "unique_id": "analysis.ro_exemplar.legacy_q5_local_supplier_volume", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "analysis/legacy_tpch/legacy_q5_local_supplier_volume.sql", "original_file_path": "analysis/legacy_tpch/legacy_q5_local_supplier_volume.sql", "name": "legacy_q5_local_supplier_volume", "alias": "legacy_q5_local_supplier_volume", "checksum": {"name": "sha256", "checksum": "bbb20b800a4f32b8e7d1ba0befa61105c1654208081149141922099a62f1475b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/analysis/legacy_tpch/legacy_q5_local_supplier_volume.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724204, "compiled_sql": "\n\n\n\n\nselect\n    n_name,\n    sum(l_extendedprice * (1 - l_discount)) as revenue\nfrom\n    snowflake_sample_data.tpch_sf1.customer,\n    snowflake_sample_data.tpch_sf1.orders,\n    snowflake_sample_data.tpch_sf1.lineitem,\n    snowflake_sample_data.tpch_sf1.supplier,\n    snowflake_sample_data.tpch_sf1.nation,\n    snowflake_sample_data.tpch_sf1.region\nwhere\n    c_custkey = o_custkey\n    and l_orderkey = o_orderkey\n    and l_suppkey = s_suppkey\n    and c_nationkey = s_nationkey\n    and s_nationkey = n_nationkey\n    and n_regionkey = r_regionkey\n    and r_name = 'ASIA'\n    and o_orderdate >= to_date('1994-01-01')\n    and o_orderdate < dateadd(year, 1, to_date('1994-01-01')) \ngroup by\n    n_name\norder by\n    revenue desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.ro_exemplar.stg_tpch_orders_assert_positive_price": {"raw_sql": "{{\n    config(\n        enabled=true,\n        severity='error',\n        tags = ['finance']\n    )\n}}\n\nwith orders as ( select * from {{ ref('stg_tpch_orders') }} )\n\nselect *\nfrom   orders \nwhere  total_price < 0", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.ro_exemplar.stg_tpch_orders"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["finance"], "full_refresh": null, "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "data_test", "stg_tpch_orders_assert_positive_price"], "unique_id": "test.ro_exemplar.stg_tpch_orders_assert_positive_price", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "data_test/stg_tpch_orders_assert_positive_price.sql", "original_file_path": "tests/stg_tpch_orders_assert_positive_price.sql", "name": "stg_tpch_orders_assert_positive_price", "alias": "stg_tpch_orders_assert_positive_price", "checksum": {"name": "sha256", "checksum": "8053b8720b4b33690bebc56cb881005b949ee16023e351a1bc962529f18fe038"}, "tags": ["finance", "data"], "refs": [["stg_tpch_orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/tests/stg_tpch_orders_assert_positive_price.sql", "build_path": null, "deferred": false, "unrendered_config": {"enabled": true, "severity": "error", "tags": ["finance"]}, "created_at": 1638724204, "compiled_sql": "\n\nwith orders as ( select * from \"postgres\".\"baseschema\".\"stg_tpch_orders\" )\n\nselect *\nfrom   orders \nwhere  total_price < 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.ro_exemplar.unique_order_items_order_item_id.ed4f8c3f3f": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_item_id", "model": "{% if config.get('where') %}(select * from {{ ref('order_items') }} where {{config.get('where')}}) order_items{% else %}{{ ref('order_items') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.order_items"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_order_items_order_item_id"], "unique_id": "test.ro_exemplar.unique_order_items_order_item_id.ed4f8c3f3f", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_order_items_order_item_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "unique_order_items_order_item_id", "alias": "unique_order_items_order_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["order_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/intermediate/intermediate.yml/schema_test/unique_order_items_order_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724204, "compiled_sql": "\n    \n    \n\nselect\n    order_item_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"order_items\"\nwhere order_item_id is not null\ngroup by order_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_item_id"}, "test.ro_exemplar.not_null_order_items_order_item_id.82130d1510": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_item_id", "model": "{% if config.get('where') %}(select * from {{ ref('order_items') }} where {{config.get('where')}}) order_items{% else %}{{ ref('order_items') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.order_items"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_order_items_order_item_id"], "unique_id": "test.ro_exemplar.not_null_order_items_order_item_id.82130d1510", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_order_items_order_item_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "not_null_order_items_order_item_id", "alias": "not_null_order_items_order_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["order_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/intermediate/intermediate.yml/schema_test/not_null_order_items_order_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724204, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"order_items\"\nwhere order_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_item_id"}, "test.ro_exemplar.unique_part_suppliers_part_supplier_id.07e99480dd": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "part_supplier_id", "model": "{% if config.get('where') %}(select * from {{ ref('part_suppliers') }} where {{config.get('where')}}) part_suppliers{% else %}{{ ref('part_suppliers') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.part_suppliers"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_part_suppliers_part_supplier_id"], "unique_id": "test.ro_exemplar.unique_part_suppliers_part_supplier_id.07e99480dd", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_part_suppliers_part_supplier_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "unique_part_suppliers_part_supplier_id", "alias": "unique_part_suppliers_part_supplier_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["part_suppliers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/intermediate/intermediate.yml/schema_test/unique_part_suppliers_part_supplier_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724204, "compiled_sql": "\n    \n    \n\nselect\n    part_supplier_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"part_suppliers\"\nwhere part_supplier_id is not null\ngroup by part_supplier_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "part_supplier_id"}, "test.ro_exemplar.not_null_part_suppliers_part_supplier_id.74582227aa": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "part_supplier_id", "model": "{% if config.get('where') %}(select * from {{ ref('part_suppliers') }} where {{config.get('where')}}) part_suppliers{% else %}{{ ref('part_suppliers') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.part_suppliers"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_part_suppliers_part_supplier_id"], "unique_id": "test.ro_exemplar.not_null_part_suppliers_part_supplier_id.74582227aa", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_part_suppliers_part_supplier_id.sql", "original_file_path": "models/intermediate/intermediate.yml", "name": "not_null_part_suppliers_part_supplier_id", "alias": "not_null_part_suppliers_part_supplier_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["part_suppliers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/intermediate/intermediate.yml/schema_test/not_null_part_suppliers_part_supplier_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724204, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"part_suppliers\"\nwhere part_supplier_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "part_supplier_id"}, "test.ro_exemplar.unique_dim_customers_customer_id.614ed4fd85": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{% if config.get('where') %}(select * from {{ ref('dim_customers') }} where {{config.get('where')}}) dim_customers{% else %}{{ ref('dim_customers') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.dim_customers"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_dim_customers_customer_id"], "unique_id": "test.ro_exemplar.unique_dim_customers_customer_id.614ed4fd85", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_dim_customers_customer_id.sql", "original_file_path": "models/marts/core.yml", "name": "unique_dim_customers_customer_id", "alias": "unique_dim_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/unique_dim_customers_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    customer_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"dim_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id"}, "test.ro_exemplar.not_null_dim_customers_customer_id.f962be5a88": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{% if config.get('where') %}(select * from {{ ref('dim_customers') }} where {{config.get('where')}}) dim_customers{% else %}{{ ref('dim_customers') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.dim_customers"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_dim_customers_customer_id"], "unique_id": "test.ro_exemplar.not_null_dim_customers_customer_id.f962be5a88", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_dim_customers_customer_id.sql", "original_file_path": "models/marts/core.yml", "name": "not_null_dim_customers_customer_id", "alias": "not_null_dim_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/not_null_dim_customers_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"dim_customers\"\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id"}, "test.ro_exemplar.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.4b7c6f0e72": {"raw_sql": "{{ test_accepted_values(**_dbt_schema_test_kwargs) }}{{ config(severity=\"warn\",alias=\"accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["AFRICA", "MIDDLE EAST", "ASIA", "EUROPE", "AMERICA"], "column_name": "region", "model": "{% if config.get('where') %}(select * from {{ ref('dim_customers') }} where {{config.get('where')}}) dim_customers{% else %}{{ ref('dim_customers') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.default__test_accepted_values"], "nodes": ["model.ro_exemplar.dim_customers"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "warn", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA"], "unique_id": "test.ro_exemplar.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.4b7c6f0e72", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc.sql", "original_file_path": "models/marts/core.yml", "name": "accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA", "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "accepted_values_dim_customers_19c499e4c12e802c2c2bd2047d4767fc"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        region as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"baseschema\".\"dim_customers\"\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'AFRICA','MIDDLE EAST','ASIA','EUROPE','AMERICA'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "region"}, "test.ro_exemplar.unique_dim_parts_part_id.55454abf34": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "part_id", "model": "{% if config.get('where') %}(select * from {{ ref('dim_parts') }} where {{config.get('where')}}) dim_parts{% else %}{{ ref('dim_parts') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.dim_parts"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_dim_parts_part_id"], "unique_id": "test.ro_exemplar.unique_dim_parts_part_id.55454abf34", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_dim_parts_part_id.sql", "original_file_path": "models/marts/core.yml", "name": "unique_dim_parts_part_id", "alias": "unique_dim_parts_part_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_parts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/unique_dim_parts_part_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    part_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"dim_parts\"\nwhere part_id is not null\ngroup by part_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "part_id"}, "test.ro_exemplar.not_null_dim_parts_part_id.c76d8f3f95": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "part_id", "model": "{% if config.get('where') %}(select * from {{ ref('dim_parts') }} where {{config.get('where')}}) dim_parts{% else %}{{ ref('dim_parts') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.dim_parts"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_dim_parts_part_id"], "unique_id": "test.ro_exemplar.not_null_dim_parts_part_id.c76d8f3f95", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_dim_parts_part_id.sql", "original_file_path": "models/marts/core.yml", "name": "not_null_dim_parts_part_id", "alias": "not_null_dim_parts_part_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_parts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/not_null_dim_parts_part_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"dim_parts\"\nwhere part_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "part_id"}, "test.ro_exemplar.unique_dim_suppliers_supplier_id.c7ef9e3985": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "supplier_id", "model": "{% if config.get('where') %}(select * from {{ ref('dim_suppliers') }} where {{config.get('where')}}) dim_suppliers{% else %}{{ ref('dim_suppliers') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.dim_suppliers"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_dim_suppliers_supplier_id"], "unique_id": "test.ro_exemplar.unique_dim_suppliers_supplier_id.c7ef9e3985", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_dim_suppliers_supplier_id.sql", "original_file_path": "models/marts/core.yml", "name": "unique_dim_suppliers_supplier_id", "alias": "unique_dim_suppliers_supplier_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_suppliers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/unique_dim_suppliers_supplier_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    supplier_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"dim_suppliers\"\nwhere supplier_id is not null\ngroup by supplier_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "supplier_id"}, "test.ro_exemplar.not_null_dim_suppliers_supplier_id.3249e4026f": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_id", "model": "{% if config.get('where') %}(select * from {{ ref('dim_suppliers') }} where {{config.get('where')}}) dim_suppliers{% else %}{{ ref('dim_suppliers') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.dim_suppliers"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_dim_suppliers_supplier_id"], "unique_id": "test.ro_exemplar.not_null_dim_suppliers_supplier_id.3249e4026f", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_dim_suppliers_supplier_id.sql", "original_file_path": "models/marts/core.yml", "name": "not_null_dim_suppliers_supplier_id", "alias": "not_null_dim_suppliers_supplier_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_suppliers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/not_null_dim_suppliers_supplier_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"dim_suppliers\"\nwhere supplier_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "supplier_id"}, "test.ro_exemplar.unique_fct_order_items_order_item_id.f3d57f0ce5": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_item_id", "model": "{% if config.get('where') %}(select * from {{ ref('fct_order_items') }} where {{config.get('where')}}) fct_order_items{% else %}{{ ref('fct_order_items') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.fct_order_items"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_fct_order_items_order_item_id"], "unique_id": "test.ro_exemplar.unique_fct_order_items_order_item_id.f3d57f0ce5", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_fct_order_items_order_item_id.sql", "original_file_path": "models/marts/core.yml", "name": "unique_fct_order_items_order_item_id", "alias": "unique_fct_order_items_order_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_order_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/unique_fct_order_items_order_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    order_item_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"fct_order_items\"\nwhere order_item_id is not null\ngroup by order_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_item_id"}, "test.ro_exemplar.not_null_fct_order_items_order_item_id.8ff0a2f6c8": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_item_id", "model": "{% if config.get('where') %}(select * from {{ ref('fct_order_items') }} where {{config.get('where')}}) fct_order_items{% else %}{{ ref('fct_order_items') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.fct_order_items"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_fct_order_items_order_item_id"], "unique_id": "test.ro_exemplar.not_null_fct_order_items_order_item_id.8ff0a2f6c8", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_fct_order_items_order_item_id.sql", "original_file_path": "models/marts/core.yml", "name": "not_null_fct_order_items_order_item_id", "alias": "not_null_fct_order_items_order_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_order_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/not_null_fct_order_items_order_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"fct_order_items\"\nwhere order_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_item_id"}, "test.ro_exemplar.unique_fct_orders_order_id.751c25cf10": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{% if config.get('where') %}(select * from {{ ref('fct_orders') }} where {{config.get('where')}}) fct_orders{% else %}{{ ref('fct_orders') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.fct_orders"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_fct_orders_order_id"], "unique_id": "test.ro_exemplar.unique_fct_orders_order_id.751c25cf10", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_fct_orders_order_id.sql", "original_file_path": "models/marts/core.yml", "name": "unique_fct_orders_order_id", "alias": "unique_fct_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/unique_fct_orders_order_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    order_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"fct_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id"}, "test.ro_exemplar.not_null_fct_orders_order_id.98fd6393e1": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{% if config.get('where') %}(select * from {{ ref('fct_orders') }} where {{config.get('where')}}) fct_orders{% else %}{{ ref('fct_orders') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.fct_orders"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_fct_orders_order_id"], "unique_id": "test.ro_exemplar.not_null_fct_orders_order_id.98fd6393e1", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_fct_orders_order_id.sql", "original_file_path": "models/marts/core.yml", "name": "not_null_fct_orders_order_id", "alias": "not_null_fct_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["fct_orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/not_null_fct_orders_order_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"fct_orders\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id"}, "test.ro_exemplar.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.b0e7be428a": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(severity=\"error\",alias=\"relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_customers')", "field": "customer_id", "column_name": "customer_id", "model": "{% if config.get('where') %}(select * from {{ ref('fct_orders') }} where {{config.get('where')}}) fct_orders{% else %}{{ ref('fct_orders') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["model.ro_exemplar.dim_customers", "model.ro_exemplar.fct_orders"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "error", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "relationships_fct_orders_customer_id__customer_id__ref_dim_customers_"], "unique_id": "test.ro_exemplar.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.b0e7be428a", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c.sql", "original_file_path": "models/marts/core.yml", "name": "relationships_fct_orders_customer_id__customer_id__ref_dim_customers_", "alias": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["dim_customers"], ["fct_orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "error", "alias": "relationships_fct_orders_0c6c6d9e6f30dfb9b653557ebf38e47c"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    child.customer_id\n\nfrom \"postgres\".\"baseschema\".\"fct_orders\" as child\n\nleft join \"postgres\".\"baseschema\".\"dim_customers\" as parent\n    on child.customer_id = parent.customer_id\n\nwhere child.customer_id is not null\n  and parent.customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id"}, "test.ro_exemplar.unique_agg_customer_orders_customer_id.4684ecc101": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{% if config.get('where') %}(select * from {{ ref('agg_customer_orders') }} where {{config.get('where')}}) agg_customer_orders{% else %}{{ ref('agg_customer_orders') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.agg_customer_orders"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_agg_customer_orders_customer_id"], "unique_id": "test.ro_exemplar.unique_agg_customer_orders_customer_id.4684ecc101", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_agg_customer_orders_customer_id.sql", "original_file_path": "models/marts/core.yml", "name": "unique_agg_customer_orders_customer_id", "alias": "unique_agg_customer_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agg_customer_orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/unique_agg_customer_orders_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    customer_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"agg_customer_orders\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id"}, "test.ro_exemplar.not_null_agg_customer_orders_customer_id.5fa6f2bd3d": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{% if config.get('where') %}(select * from {{ ref('agg_customer_orders') }} where {{config.get('where')}}) agg_customer_orders{% else %}{{ ref('agg_customer_orders') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.agg_customer_orders"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_agg_customer_orders_customer_id"], "unique_id": "test.ro_exemplar.not_null_agg_customer_orders_customer_id.5fa6f2bd3d", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_agg_customer_orders_customer_id.sql", "original_file_path": "models/marts/core.yml", "name": "not_null_agg_customer_orders_customer_id", "alias": "not_null_agg_customer_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agg_customer_orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/core.yml/schema_test/not_null_agg_customer_orders_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"agg_customer_orders\"\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id"}, "test.ro_exemplar.accepted_values_agg_regions_segments_region__MIDDLE_EAST__AFRICA__EUROPE__ASIA__AMERICA.07539c4f49": {"raw_sql": "{{ test_accepted_values(**_dbt_schema_test_kwargs) }}{{ config(alias=\"accepted_values_agg_regions_se_bdaaf019fdfd5793c6320921d136b400\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["MIDDLE EAST", "AFRICA", "EUROPE", "ASIA", "AMERICA"], "column_name": "region", "model": "{% if config.get('where') %}(select * from {{ ref('agg_regions_segments') }} where {{config.get('where')}}) agg_regions_segments{% else %}{{ ref('agg_regions_segments') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.default__test_accepted_values"], "nodes": ["model.ro_exemplar.agg_regions_segments"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "accepted_values_agg_regions_se_bdaaf019fdfd5793c6320921d136b400", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "accepted_values_agg_regions_segments_region__MIDDLE_EAST__AFRICA__EUROPE__ASIA__AMERICA"], "unique_id": "test.ro_exemplar.accepted_values_agg_regions_segments_region__MIDDLE_EAST__AFRICA__EUROPE__ASIA__AMERICA.07539c4f49", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/accepted_values_agg_regions_se_bdaaf019fdfd5793c6320921d136b400.sql", "original_file_path": "models/marts/aggregates/aggregates.yml", "name": "accepted_values_agg_regions_segments_region__MIDDLE_EAST__AFRICA__EUROPE__ASIA__AMERICA", "alias": "accepted_values_agg_regions_se_bdaaf019fdfd5793c6320921d136b400", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agg_regions_segments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/aggregates/aggregates.yml/schema_test/accepted_values_agg_regions_se_bdaaf019fdfd5793c6320921d136b400.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_agg_regions_se_bdaaf019fdfd5793c6320921d136b400"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        region as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"baseschema\".\"agg_regions_segments\"\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'MIDDLE EAST','AFRICA','EUROPE','ASIA','AMERICA'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "region"}, "test.ro_exemplar.accepted_values_agg_regions_segments_market_segment__HOUSEHOLD__AUTOMOBILE__FURNITURE__BUILDING__MACHINERY.7f84eb689b": {"raw_sql": "{{ test_accepted_values(**_dbt_schema_test_kwargs) }}{{ config(alias=\"accepted_values_agg_regions_se_e6b06967ff4c983a52e22b28b19d2cf4\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["HOUSEHOLD", "AUTOMOBILE", "FURNITURE", "BUILDING", "MACHINERY"], "column_name": "market_segment", "model": "{% if config.get('where') %}(select * from {{ ref('agg_regions_segments') }} where {{config.get('where')}}) agg_regions_segments{% else %}{{ ref('agg_regions_segments') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.default__test_accepted_values"], "nodes": ["model.ro_exemplar.agg_regions_segments"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "accepted_values_agg_regions_se_e6b06967ff4c983a52e22b28b19d2cf4", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "accepted_values_agg_regions_segments_market_segment__HOUSEHOLD__AUTOMOBILE__FURNITURE__BUILDING__MACHINERY"], "unique_id": "test.ro_exemplar.accepted_values_agg_regions_segments_market_segment__HOUSEHOLD__AUTOMOBILE__FURNITURE__BUILDING__MACHINERY.7f84eb689b", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/accepted_values_agg_regions_se_e6b06967ff4c983a52e22b28b19d2cf4.sql", "original_file_path": "models/marts/aggregates/aggregates.yml", "name": "accepted_values_agg_regions_segments_market_segment__HOUSEHOLD__AUTOMOBILE__FURNITURE__BUILDING__MACHINERY", "alias": "accepted_values_agg_regions_se_e6b06967ff4c983a52e22b28b19d2cf4", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agg_regions_segments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/aggregates/aggregates.yml/schema_test/accepted_values_agg_regions_se_e6b06967ff4c983a52e22b28b19d2cf4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_agg_regions_se_e6b06967ff4c983a52e22b28b19d2cf4"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        market_segment as value_field,\n        count(*) as n_records\n\n    from \"postgres\".\"baseschema\".\"agg_regions_segments\"\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'HOUSEHOLD','AUTOMOBILE','FURNITURE','BUILDING','MACHINERY'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "market_segment"}, "test.ro_exemplar.not_null_agg_regions_segments_total_sales.cbfa50be5a": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "total_sales", "model": "{% if config.get('where') %}(select * from {{ ref('agg_regions_segments') }} where {{config.get('where')}}) agg_regions_segments{% else %}{{ ref('agg_regions_segments') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.agg_regions_segments"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_agg_regions_segments_total_sales"], "unique_id": "test.ro_exemplar.not_null_agg_regions_segments_total_sales.cbfa50be5a", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_agg_regions_segments_total_sales.sql", "original_file_path": "models/marts/aggregates/aggregates.yml", "name": "not_null_agg_regions_segments_total_sales", "alias": "not_null_agg_regions_segments_total_sales", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["agg_regions_segments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/marts/aggregates/aggregates.yml/schema_test/not_null_agg_regions_segments_total_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"agg_regions_segments\"\nwhere total_sales is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "total_sales"}, "test.ro_exemplar.unique_stg_tpch_customers_customer_id.91210f3989": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_customers') }} where {{config.get('where')}}) stg_tpch_customers{% else %}{{ ref('stg_tpch_customers') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.stg_tpch_customers"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_stg_tpch_customers_customer_id"], "unique_id": "test.ro_exemplar.unique_stg_tpch_customers_customer_id.91210f3989", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_stg_tpch_customers_customer_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "unique_stg_tpch_customers_customer_id", "alias": "unique_stg_tpch_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/unique_stg_tpch_customers_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    customer_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"stg_tpch_customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id"}, "test.ro_exemplar.not_null_stg_tpch_customers_customer_id.1ea7eeab8d": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_customers') }} where {{config.get('where')}}) stg_tpch_customers{% else %}{{ ref('stg_tpch_customers') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.stg_tpch_customers"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_stg_tpch_customers_customer_id"], "unique_id": "test.ro_exemplar.not_null_stg_tpch_customers_customer_id.1ea7eeab8d", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_stg_tpch_customers_customer_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "not_null_stg_tpch_customers_customer_id", "alias": "not_null_stg_tpch_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/not_null_stg_tpch_customers_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"stg_tpch_customers\"\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id"}, "test.ro_exemplar.unique_stg_tpch_line_items_order_item_id.44ad132730": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_item_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_line_items') }} where {{config.get('where')}}) stg_tpch_line_items{% else %}{{ ref('stg_tpch_line_items') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.stg_tpch_line_items"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_stg_tpch_line_items_order_item_id"], "unique_id": "test.ro_exemplar.unique_stg_tpch_line_items_order_item_id.44ad132730", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_stg_tpch_line_items_order_item_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "unique_stg_tpch_line_items_order_item_id", "alias": "unique_stg_tpch_line_items_order_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_line_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/unique_stg_tpch_line_items_order_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    order_item_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"stg_tpch_line_items\"\nwhere order_item_id is not null\ngroup by order_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_item_id"}, "test.ro_exemplar.not_null_stg_tpch_line_items_order_item_id.4d6dd162c8": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_item_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_line_items') }} where {{config.get('where')}}) stg_tpch_line_items{% else %}{{ ref('stg_tpch_line_items') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.stg_tpch_line_items"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_stg_tpch_line_items_order_item_id"], "unique_id": "test.ro_exemplar.not_null_stg_tpch_line_items_order_item_id.4d6dd162c8", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_stg_tpch_line_items_order_item_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "not_null_stg_tpch_line_items_order_item_id", "alias": "not_null_stg_tpch_line_items_order_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_line_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/not_null_stg_tpch_line_items_order_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"stg_tpch_line_items\"\nwhere order_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_item_id"}, "test.ro_exemplar.unique_stg_tpch_nations_nation_id.f117da9e94": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "nation_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_nations') }} where {{config.get('where')}}) stg_tpch_nations{% else %}{{ ref('stg_tpch_nations') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.stg_tpch_nations"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_stg_tpch_nations_nation_id"], "unique_id": "test.ro_exemplar.unique_stg_tpch_nations_nation_id.f117da9e94", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_stg_tpch_nations_nation_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "unique_stg_tpch_nations_nation_id", "alias": "unique_stg_tpch_nations_nation_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_nations"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/unique_stg_tpch_nations_nation_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    nation_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"stg_tpch_nations\"\nwhere nation_id is not null\ngroup by nation_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "nation_id"}, "test.ro_exemplar.not_null_stg_tpch_nations_nation_id.ffbfab2053": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nation_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_nations') }} where {{config.get('where')}}) stg_tpch_nations{% else %}{{ ref('stg_tpch_nations') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.stg_tpch_nations"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_stg_tpch_nations_nation_id"], "unique_id": "test.ro_exemplar.not_null_stg_tpch_nations_nation_id.ffbfab2053", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_stg_tpch_nations_nation_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "not_null_stg_tpch_nations_nation_id", "alias": "not_null_stg_tpch_nations_nation_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_nations"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/not_null_stg_tpch_nations_nation_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"stg_tpch_nations\"\nwhere nation_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "nation_id"}, "test.ro_exemplar.unique_stg_tpch_orders_order_id.9978d0404c": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_orders') }} where {{config.get('where')}}) stg_tpch_orders{% else %}{{ ref('stg_tpch_orders') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.stg_tpch_orders"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_stg_tpch_orders_order_id"], "unique_id": "test.ro_exemplar.unique_stg_tpch_orders_order_id.9978d0404c", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_stg_tpch_orders_order_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "unique_stg_tpch_orders_order_id", "alias": "unique_stg_tpch_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/unique_stg_tpch_orders_order_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    order_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"stg_tpch_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id"}, "test.ro_exemplar.not_null_stg_tpch_orders_order_id.707be78574": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_orders') }} where {{config.get('where')}}) stg_tpch_orders{% else %}{{ ref('stg_tpch_orders') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.stg_tpch_orders"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_stg_tpch_orders_order_id"], "unique_id": "test.ro_exemplar.not_null_stg_tpch_orders_order_id.707be78574", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_stg_tpch_orders_order_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "not_null_stg_tpch_orders_order_id", "alias": "not_null_stg_tpch_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/not_null_stg_tpch_orders_order_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"stg_tpch_orders\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id"}, "test.ro_exemplar.unique_stg_tpch_part_suppliers_part_supplier_id.d840aa3ab1": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "part_supplier_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_part_suppliers') }} where {{config.get('where')}}) stg_tpch_part_suppliers{% else %}{{ ref('stg_tpch_part_suppliers') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.stg_tpch_part_suppliers"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_stg_tpch_part_suppliers_part_supplier_id"], "unique_id": "test.ro_exemplar.unique_stg_tpch_part_suppliers_part_supplier_id.d840aa3ab1", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_stg_tpch_part_suppliers_part_supplier_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "unique_stg_tpch_part_suppliers_part_supplier_id", "alias": "unique_stg_tpch_part_suppliers_part_supplier_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_part_suppliers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/unique_stg_tpch_part_suppliers_part_supplier_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    part_supplier_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"stg_tpch_part_suppliers\"\nwhere part_supplier_id is not null\ngroup by part_supplier_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "part_supplier_id"}, "test.ro_exemplar.not_null_stg_tpch_part_suppliers_part_supplier_id.c75bed2b95": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "part_supplier_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_part_suppliers') }} where {{config.get('where')}}) stg_tpch_part_suppliers{% else %}{{ ref('stg_tpch_part_suppliers') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.stg_tpch_part_suppliers"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_stg_tpch_part_suppliers_part_supplier_id"], "unique_id": "test.ro_exemplar.not_null_stg_tpch_part_suppliers_part_supplier_id.c75bed2b95", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_stg_tpch_part_suppliers_part_supplier_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "not_null_stg_tpch_part_suppliers_part_supplier_id", "alias": "not_null_stg_tpch_part_suppliers_part_supplier_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_part_suppliers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/not_null_stg_tpch_part_suppliers_part_supplier_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"stg_tpch_part_suppliers\"\nwhere part_supplier_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "part_supplier_id"}, "test.ro_exemplar.unique_stg_tpch_parts_part_id.e2ec42e7e8": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "part_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_parts') }} where {{config.get('where')}}) stg_tpch_parts{% else %}{{ ref('stg_tpch_parts') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.stg_tpch_parts"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_stg_tpch_parts_part_id"], "unique_id": "test.ro_exemplar.unique_stg_tpch_parts_part_id.e2ec42e7e8", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_stg_tpch_parts_part_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "unique_stg_tpch_parts_part_id", "alias": "unique_stg_tpch_parts_part_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_parts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/unique_stg_tpch_parts_part_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    part_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"stg_tpch_parts\"\nwhere part_id is not null\ngroup by part_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "part_id"}, "test.ro_exemplar.not_null_stg_tpch_parts_part_id.6d4bc71226": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "part_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_parts') }} where {{config.get('where')}}) stg_tpch_parts{% else %}{{ ref('stg_tpch_parts') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.stg_tpch_parts"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_stg_tpch_parts_part_id"], "unique_id": "test.ro_exemplar.not_null_stg_tpch_parts_part_id.6d4bc71226", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_stg_tpch_parts_part_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "not_null_stg_tpch_parts_part_id", "alias": "not_null_stg_tpch_parts_part_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_parts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/not_null_stg_tpch_parts_part_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"stg_tpch_parts\"\nwhere part_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "part_id"}, "test.ro_exemplar.unique_stg_tpch_regions_region_id.45c8de89ef": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "region_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_regions') }} where {{config.get('where')}}) stg_tpch_regions{% else %}{{ ref('stg_tpch_regions') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.stg_tpch_regions"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_stg_tpch_regions_region_id"], "unique_id": "test.ro_exemplar.unique_stg_tpch_regions_region_id.45c8de89ef", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_stg_tpch_regions_region_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "unique_stg_tpch_regions_region_id", "alias": "unique_stg_tpch_regions_region_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_regions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/unique_stg_tpch_regions_region_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    region_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"stg_tpch_regions\"\nwhere region_id is not null\ngroup by region_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "region_id"}, "test.ro_exemplar.not_null_stg_tpch_regions_region_id.af735e4377": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "region_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_regions') }} where {{config.get('where')}}) stg_tpch_regions{% else %}{{ ref('stg_tpch_regions') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.stg_tpch_regions"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_stg_tpch_regions_region_id"], "unique_id": "test.ro_exemplar.not_null_stg_tpch_regions_region_id.af735e4377", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_stg_tpch_regions_region_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "not_null_stg_tpch_regions_region_id", "alias": "not_null_stg_tpch_regions_region_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_regions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/not_null_stg_tpch_regions_region_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"stg_tpch_regions\"\nwhere region_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "region_id"}, "test.ro_exemplar.unique_stg_tpch_suppliers_supplier_id.cd6c757323": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "supplier_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_suppliers') }} where {{config.get('where')}}) stg_tpch_suppliers{% else %}{{ ref('stg_tpch_suppliers') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ro_exemplar.stg_tpch_suppliers"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "unique_stg_tpch_suppliers_supplier_id"], "unique_id": "test.ro_exemplar.unique_stg_tpch_suppliers_supplier_id.cd6c757323", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/unique_stg_tpch_suppliers_supplier_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "unique_stg_tpch_suppliers_supplier_id", "alias": "unique_stg_tpch_suppliers_supplier_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_suppliers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/unique_stg_tpch_suppliers_supplier_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    supplier_id,\n    count(*) as n_records\n\nfrom \"postgres\".\"baseschema\".\"stg_tpch_suppliers\"\nwhere supplier_id is not null\ngroup by supplier_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "supplier_id"}, "test.ro_exemplar.not_null_stg_tpch_suppliers_supplier_id.26684a1494": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "supplier_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_tpch_suppliers') }} where {{config.get('where')}}) stg_tpch_suppliers{% else %}{{ ref('stg_tpch_suppliers') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ro_exemplar.stg_tpch_suppliers"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "not_null_stg_tpch_suppliers_supplier_id"], "unique_id": "test.ro_exemplar.not_null_stg_tpch_suppliers_supplier_id.26684a1494", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/not_null_stg_tpch_suppliers_supplier_id.sql", "original_file_path": "models/staging/tpch/schema.yml", "name": "not_null_stg_tpch_suppliers_supplier_id", "alias": "not_null_stg_tpch_suppliers_supplier_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_tpch_suppliers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/schema.yml/schema_test/not_null_stg_tpch_suppliers_supplier_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"baseschema\".\"stg_tpch_suppliers\"\nwhere supplier_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "supplier_id"}, "test.ro_exemplar.source_unique_tpch_orders_o_orderkey.608ed560d8": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "o_orderkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'orders') }} where {{config.get('where')}}) orders{% else %}{{ source('tpch', 'orders') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.ro_exemplar.tpch.orders"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_unique_tpch_orders_o_orderkey"], "unique_id": "test.ro_exemplar.source_unique_tpch_orders_o_orderkey.608ed560d8", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_unique_tpch_orders_o_orderkey.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_unique_tpch_orders_o_orderkey", "alias": "source_unique_tpch_orders_o_orderkey", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "orders"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_unique_tpch_orders_o_orderkey.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    o_orderkey,\n    count(*) as n_records\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"orders\"\nwhere o_orderkey is not null\ngroup by o_orderkey\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "o_orderkey"}, "test.ro_exemplar.source_not_null_tpch_orders_o_orderkey.ace6662240": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "o_orderkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'orders') }} where {{config.get('where')}}) orders{% else %}{{ source('tpch', 'orders') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.ro_exemplar.tpch.orders"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_not_null_tpch_orders_o_orderkey"], "unique_id": "test.ro_exemplar.source_not_null_tpch_orders_o_orderkey.ace6662240", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_not_null_tpch_orders_o_orderkey.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_not_null_tpch_orders_o_orderkey", "alias": "source_not_null_tpch_orders_o_orderkey", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "orders"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_not_null_tpch_orders_o_orderkey.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"orders\"\nwhere o_orderkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "o_orderkey"}, "test.ro_exemplar.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.bbe1984f7f": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'customer')", "field": "c_custkey", "column_name": "o_custkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'orders') }} where {{config.get('where')}}) orders{% else %}{{ source('tpch', 'orders') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["source.ro_exemplar.tpch.customer", "source.ro_exemplar.tpch.orders"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_"], "unique_id": "test.ro_exemplar.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.bbe1984f7f", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_", "alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "customer"], ["tpch", "orders"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_orde_aa2aa3d71f8f1d2febff342069b4fe2b"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    child.o_custkey\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"orders\" as child\n\nleft join \"snowflake_sample_data\".\"tpch_sf1\".\"customer\" as parent\n    on child.o_custkey = parent.c_custkey\n\nwhere child.o_custkey is not null\n  and parent.c_custkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "o_custkey"}, "test.ro_exemplar.source_unique_tpch_customer_c_custkey.16df90e0fb": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "c_custkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'customer') }} where {{config.get('where')}}) customer{% else %}{{ source('tpch', 'customer') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.ro_exemplar.tpch.customer"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_unique_tpch_customer_c_custkey"], "unique_id": "test.ro_exemplar.source_unique_tpch_customer_c_custkey.16df90e0fb", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_unique_tpch_customer_c_custkey.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_unique_tpch_customer_c_custkey", "alias": "source_unique_tpch_customer_c_custkey", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "customer"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_unique_tpch_customer_c_custkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    c_custkey,\n    count(*) as n_records\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"customer\"\nwhere c_custkey is not null\ngroup by c_custkey\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "c_custkey"}, "test.ro_exemplar.source_not_null_tpch_customer_c_custkey.039d457aa9": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "c_custkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'customer') }} where {{config.get('where')}}) customer{% else %}{{ source('tpch', 'customer') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.ro_exemplar.tpch.customer"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_not_null_tpch_customer_c_custkey"], "unique_id": "test.ro_exemplar.source_not_null_tpch_customer_c_custkey.039d457aa9", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_not_null_tpch_customer_c_custkey.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_not_null_tpch_customer_c_custkey", "alias": "source_not_null_tpch_customer_c_custkey", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "customer"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_not_null_tpch_customer_c_custkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"customer\"\nwhere c_custkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "c_custkey"}, "test.ro_exemplar.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.061cb3545a": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'orders')", "field": "o_orderkey", "column_name": "l_orderkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'lineitem') }} where {{config.get('where')}}) lineitem{% else %}{{ source('tpch', 'lineitem') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["source.ro_exemplar.tpch.orders", "source.ro_exemplar.tpch.lineitem"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_"], "unique_id": "test.ro_exemplar.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.061cb3545a", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_", "alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "orders"], ["tpch", "lineitem"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_line_43b59984a4c7b172d1e95c13fec6bd9c"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    child.l_orderkey\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"lineitem\" as child\n\nleft join \"snowflake_sample_data\".\"tpch_sf1\".\"orders\" as parent\n    on child.l_orderkey = parent.o_orderkey\n\nwhere child.l_orderkey is not null\n  and parent.o_orderkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "l_orderkey"}, "test.ro_exemplar.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b2b7a6544b": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'part')", "field": "p_partkey", "column_name": "l_partkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'lineitem') }} where {{config.get('where')}}) lineitem{% else %}{{ source('tpch', 'lineitem') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["source.ro_exemplar.tpch.part", "source.ro_exemplar.tpch.lineitem"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_"], "unique_id": "test.ro_exemplar.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b2b7a6544b", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_", "alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "part"], ["tpch", "lineitem"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_line_0403124f3724b4d6984e362cbdf30740"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    child.l_partkey\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"lineitem\" as child\n\nleft join \"snowflake_sample_data\".\"tpch_sf1\".\"part\" as parent\n    on child.l_partkey = parent.p_partkey\n\nwhere child.l_partkey is not null\n  and parent.p_partkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "l_partkey"}, "test.ro_exemplar.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f1ff139215": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_line_56b786676a582f41b4502498079b8292\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'supplier')", "field": "s_suppkey", "column_name": "l_suppkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'lineitem') }} where {{config.get('where')}}) lineitem{% else %}{{ source('tpch', 'lineitem') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["source.ro_exemplar.tpch.supplier", "source.ro_exemplar.tpch.lineitem"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_"], "unique_id": "test.ro_exemplar.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f1ff139215", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_relationships_tpch_line_56b786676a582f41b4502498079b8292.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_", "alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "supplier"], ["tpch", "lineitem"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_relationships_tpch_line_56b786676a582f41b4502498079b8292.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_line_56b786676a582f41b4502498079b8292"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    child.l_suppkey\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"lineitem\" as child\n\nleft join \"snowflake_sample_data\".\"tpch_sf1\".\"supplier\" as parent\n    on child.l_suppkey = parent.s_suppkey\n\nwhere child.l_suppkey is not null\n  and parent.s_suppkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "l_suppkey"}, "test.ro_exemplar.source_unique_tpch_nation_n_nationkey.7c800a4723": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "n_nationkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'nation') }} where {{config.get('where')}}) nation{% else %}{{ source('tpch', 'nation') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.ro_exemplar.tpch.nation"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_unique_tpch_nation_n_nationkey"], "unique_id": "test.ro_exemplar.source_unique_tpch_nation_n_nationkey.7c800a4723", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_unique_tpch_nation_n_nationkey.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_unique_tpch_nation_n_nationkey", "alias": "source_unique_tpch_nation_n_nationkey", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "nation"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_unique_tpch_nation_n_nationkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    n_nationkey,\n    count(*) as n_records\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"nation\"\nwhere n_nationkey is not null\ngroup by n_nationkey\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "n_nationkey"}, "test.ro_exemplar.source_not_null_tpch_nation_n_nationkey.74d03fc3bd": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "n_nationkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'nation') }} where {{config.get('where')}}) nation{% else %}{{ source('tpch', 'nation') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.ro_exemplar.tpch.nation"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_not_null_tpch_nation_n_nationkey"], "unique_id": "test.ro_exemplar.source_not_null_tpch_nation_n_nationkey.74d03fc3bd", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_not_null_tpch_nation_n_nationkey.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_not_null_tpch_nation_n_nationkey", "alias": "source_not_null_tpch_nation_n_nationkey", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "nation"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_not_null_tpch_nation_n_nationkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"nation\"\nwhere n_nationkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "n_nationkey"}, "test.ro_exemplar.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.2107f4d6a1": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_nati_863138f31f617783ad556b879ab65039\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'region')", "field": "r_regionkey", "column_name": "n_regionkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'nation') }} where {{config.get('where')}}) nation{% else %}{{ source('tpch', 'nation') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["source.ro_exemplar.tpch.region", "source.ro_exemplar.tpch.nation"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_"], "unique_id": "test.ro_exemplar.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.2107f4d6a1", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_relationships_tpch_nati_863138f31f617783ad556b879ab65039.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_", "alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "region"], ["tpch", "nation"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_relationships_tpch_nati_863138f31f617783ad556b879ab65039.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_nati_863138f31f617783ad556b879ab65039"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    child.n_regionkey\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"nation\" as child\n\nleft join \"snowflake_sample_data\".\"tpch_sf1\".\"region\" as parent\n    on child.n_regionkey = parent.r_regionkey\n\nwhere child.n_regionkey is not null\n  and parent.r_regionkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "n_regionkey"}, "test.ro_exemplar.source_unique_tpch_part_p_partkey.51c80d8998": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "p_partkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'part') }} where {{config.get('where')}}) part{% else %}{{ source('tpch', 'part') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.ro_exemplar.tpch.part"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_unique_tpch_part_p_partkey"], "unique_id": "test.ro_exemplar.source_unique_tpch_part_p_partkey.51c80d8998", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_unique_tpch_part_p_partkey.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_unique_tpch_part_p_partkey", "alias": "source_unique_tpch_part_p_partkey", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "part"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_unique_tpch_part_p_partkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    p_partkey,\n    count(*) as n_records\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"part\"\nwhere p_partkey is not null\ngroup by p_partkey\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "p_partkey"}, "test.ro_exemplar.source_not_null_tpch_part_p_partkey.8e48b1e3b2": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "p_partkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'part') }} where {{config.get('where')}}) part{% else %}{{ source('tpch', 'part') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.ro_exemplar.tpch.part"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_not_null_tpch_part_p_partkey"], "unique_id": "test.ro_exemplar.source_not_null_tpch_part_p_partkey.8e48b1e3b2", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_not_null_tpch_part_p_partkey.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_not_null_tpch_part_p_partkey", "alias": "source_not_null_tpch_part_p_partkey", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "part"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_not_null_tpch_part_p_partkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"part\"\nwhere p_partkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "p_partkey"}, "test.ro_exemplar.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.66b73e4b2d": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'part')", "field": "p_partkey", "column_name": "ps_partkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'partsupp') }} where {{config.get('where')}}) partsupp{% else %}{{ source('tpch', 'partsupp') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["source.ro_exemplar.tpch.part", "source.ro_exemplar.tpch.partsupp"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_"], "unique_id": "test.ro_exemplar.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.66b73e4b2d", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_", "alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "part"], ["tpch", "partsupp"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_part_a4c1d3c0d0f0db1ff9c10bf48b8c8fe8"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    child.ps_partkey\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"partsupp\" as child\n\nleft join \"snowflake_sample_data\".\"tpch_sf1\".\"part\" as parent\n    on child.ps_partkey = parent.p_partkey\n\nwhere child.ps_partkey is not null\n  and parent.p_partkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ps_partkey"}, "test.ro_exemplar.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.9a482cdc39": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'supplier')", "field": "s_suppkey", "column_name": "ps_suppkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'partsupp') }} where {{config.get('where')}}) partsupp{% else %}{{ source('tpch', 'partsupp') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["source.ro_exemplar.tpch.supplier", "source.ro_exemplar.tpch.partsupp"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_"], "unique_id": "test.ro_exemplar.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.9a482cdc39", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_", "alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "supplier"], ["tpch", "partsupp"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_part_c5396ae9effd9c1528d06af4f91b3817"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    child.ps_suppkey\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"partsupp\" as child\n\nleft join \"snowflake_sample_data\".\"tpch_sf1\".\"supplier\" as parent\n    on child.ps_suppkey = parent.s_suppkey\n\nwhere child.ps_suppkey is not null\n  and parent.s_suppkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ps_suppkey"}, "test.ro_exemplar.source_unique_tpch_region_r_regionkey.dc632affe6": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "r_regionkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'region') }} where {{config.get('where')}}) region{% else %}{{ source('tpch', 'region') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.ro_exemplar.tpch.region"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_unique_tpch_region_r_regionkey"], "unique_id": "test.ro_exemplar.source_unique_tpch_region_r_regionkey.dc632affe6", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_unique_tpch_region_r_regionkey.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_unique_tpch_region_r_regionkey", "alias": "source_unique_tpch_region_r_regionkey", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "region"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_unique_tpch_region_r_regionkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    r_regionkey,\n    count(*) as n_records\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"region\"\nwhere r_regionkey is not null\ngroup by r_regionkey\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "r_regionkey"}, "test.ro_exemplar.source_not_null_tpch_region_r_regionkey.54dc0a0dd1": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "r_regionkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'region') }} where {{config.get('where')}}) region{% else %}{{ source('tpch', 'region') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.ro_exemplar.tpch.region"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_not_null_tpch_region_r_regionkey"], "unique_id": "test.ro_exemplar.source_not_null_tpch_region_r_regionkey.54dc0a0dd1", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_not_null_tpch_region_r_regionkey.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_not_null_tpch_region_r_regionkey", "alias": "source_not_null_tpch_region_r_regionkey", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "region"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_not_null_tpch_region_r_regionkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"region\"\nwhere r_regionkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "r_regionkey"}, "test.ro_exemplar.source_unique_tpch_supplier_s_suppkey.d5bc8e5944": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "s_suppkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'supplier') }} where {{config.get('where')}}) supplier{% else %}{{ source('tpch', 'supplier') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.ro_exemplar.tpch.supplier"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_unique_tpch_supplier_s_suppkey"], "unique_id": "test.ro_exemplar.source_unique_tpch_supplier_s_suppkey.d5bc8e5944", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_unique_tpch_supplier_s_suppkey.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_unique_tpch_supplier_s_suppkey", "alias": "source_unique_tpch_supplier_s_suppkey", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "supplier"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_unique_tpch_supplier_s_suppkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    s_suppkey,\n    count(*) as n_records\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"supplier\"\nwhere s_suppkey is not null\ngroup by s_suppkey\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "s_suppkey"}, "test.ro_exemplar.source_not_null_tpch_supplier_s_suppkey.126b4f5bc4": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}{{ config(severity=\"warn\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "s_suppkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'supplier') }} where {{config.get('where')}}) supplier{% else %}{{ source('tpch', 'supplier') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.ro_exemplar.tpch.supplier"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "WARN", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_not_null_tpch_supplier_s_suppkey"], "unique_id": "test.ro_exemplar.source_not_null_tpch_supplier_s_suppkey.126b4f5bc4", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_not_null_tpch_supplier_s_suppkey.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_not_null_tpch_supplier_s_suppkey", "alias": "source_not_null_tpch_supplier_s_suppkey", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "supplier"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_not_null_tpch_supplier_s_suppkey.sql", "build_path": null, "deferred": false, "unrendered_config": {"severity": "WARN"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"supplier\"\nwhere s_suppkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "s_suppkey"}, "test.ro_exemplar.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2e4e5269dc": {"raw_sql": "{{ test_relationships(**_dbt_schema_test_kwargs) }}{{ config(alias=\"source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b\") }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "source('tpch', 'nation')", "field": "n_nationkey", "column_name": "s_nationkey", "model": "{% if config.get('where') %}(select * from {{ source('tpch', 'supplier') }} where {{config.get('where')}}) supplier{% else %}{{ source('tpch', 'supplier') }}{% endif %}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.default__test_relationships"], "nodes": ["source.ro_exemplar.tpch.nation", "source.ro_exemplar.tpch.supplier"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b", "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "baseschema_dbt_test__audit", "fqn": ["ro_exemplar", "schema_test", "source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_"], "unique_id": "test.ro_exemplar.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2e4e5269dc", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "schema_test/source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b.sql", "original_file_path": "models/staging/tpch/sources.yml", "name": "source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_", "alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [], "sources": [["tpch", "nation"], ["tpch", "supplier"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ro_exemplar/models/staging/tpch/sources.yml/schema_test/source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_relationships_tpch_supp_1c9d96c407a8f937b03dcfc97848e71b"}, "created_at": 1638724205, "compiled_sql": "\n    \n    \n\nselect\n    child.s_nationkey\n\nfrom \"snowflake_sample_data\".\"tpch_sf1\".\"supplier\" as child\n\nleft join \"snowflake_sample_data\".\"tpch_sf1\".\"nation\" as parent\n    on child.s_nationkey = parent.n_nationkey\n\nwhere child.s_nationkey is not null\n  and parent.n_nationkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "s_nationkey"}}, "sources": {"source.ro_exemplar.tpch.orders": {"fqn": ["ro_exemplar", "staging", "tpch", "tpch", "orders"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.ro_exemplar.tpch.orders", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "models/staging/tpch/sources.yml", "original_file_path": "models/staging/tpch/sources.yml", "name": "orders", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-gukeye/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "orders", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "o_orderdate::timestamp", "freshness": {"warn_after": {"count": 6, "period": "hour"}, "error_after": null, "filter": null}, "external": null, "description": "main order tracking table", "columns": {"o_orderkey": {"name": "o_orderkey", "description": "SF*1,500,000 are sparsely populated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "o_custkey": {"name": "o_custkey", "description": "Foreign key to C_custkey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "o_orderstatus": {"name": "o_orderstatus", "description": "status code of the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "o_totalprice": {"name": "o_totalprice", "description": "raw price", "meta": {}, "data_type": null, "quote": null, "tags": []}, "o_orderdate": {"name": "o_orderdate", "description": "date the order was made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "o_orderpriority": {"name": "o_orderpriority", "description": "code associated with the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "o_clerk": {"name": "o_clerk", "description": "key of the clerk", "meta": {}, "data_type": null, "quote": null, "tags": []}, "o_shippriority": {"name": "o_shippriority", "description": "numeric representation of the shipping priority, zero being the default", "meta": {}, "data_type": null, "quote": null, "tags": []}, "o_comment": {"name": "o_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"snowflake_sample_data\".\"tpch_sf1\".\"orders\"", "created_at": 1638724205}, "source.ro_exemplar.tpch.customer": {"fqn": ["ro_exemplar", "staging", "tpch", "tpch", "customer"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.ro_exemplar.tpch.customer", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "models/staging/tpch/sources.yml", "original_file_path": "models/staging/tpch/sources.yml", "name": "customer", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-gukeye/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "customer", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "main customer table", "columns": {"c_custkey": {"name": "c_custkey", "description": "unique customer key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_name": {"name": "c_name", "description": "customer key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_address": {"name": "c_address", "description": "address of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_nationkey": {"name": "c_nationkey", "description": "foreign key to stg_tpch_nations", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_phone": {"name": "c_phone", "description": "phone number of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_acctbal": {"name": "c_acctbal", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_mktsegment": {"name": "c_mktsegment", "description": "market segment of the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "c_comment": {"name": "c_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"snowflake_sample_data\".\"tpch_sf1\".\"customer\"", "created_at": 1638724205}, "source.ro_exemplar.tpch.lineitem": {"fqn": ["ro_exemplar", "staging", "tpch", "tpch", "lineitem"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.ro_exemplar.tpch.lineitem", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "models/staging/tpch/sources.yml", "original_file_path": "models/staging/tpch/sources.yml", "name": "lineitem", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-gukeye/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "lineitem", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "main lineitem table", "columns": {"l_orderkey": {"name": "l_orderkey", "description": "Foreign key to O_ORDERkey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_partkey": {"name": "l_partkey", "description": "Foreign key to P_PARTkey, first part of the compound Foreign key to (PS_PARTkey,PS_SUPPkey) with L_SUPPkey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_suppkey": {"name": "l_suppkey", "description": "Foreign key to S_SUPPkey, second part of the compound Foreign key to (PS_PARTkey, PS_SUPPkey) with L_PARTkey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_linenumber": {"name": "l_linenumber", "description": "sequence of the order items within the order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_quantity": {"name": "l_quantity", "description": "total units", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_extendedprice": {"name": "l_extendedprice", "description": "line item price", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_discount": {"name": "l_discount", "description": "percentage of the discount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_tax": {"name": "l_tax", "description": "tax rate of the order item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_returnflag": {"name": "l_returnflag", "description": "letter determining the status of the return", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_linestatus": {"name": "l_linestatus", "description": "status code of the order item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_shipdate": {"name": "l_shipdate", "description": "the date the order item is being shipped", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_commitdate": {"name": "l_commitdate", "description": "the date the order item is being commited", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_receiptdate": {"name": "l_receiptdate", "description": "the receipt date of the order item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_shipinstruct": {"name": "l_shipinstruct", "description": "additional instructions on the shipment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_shipmode": {"name": "l_shipmode", "description": "method of shipping", "meta": {}, "data_type": null, "quote": null, "tags": []}, "l_comment": {"name": "l_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"snowflake_sample_data\".\"tpch_sf1\".\"lineitem\"", "created_at": 1638724205}, "source.ro_exemplar.tpch.nation": {"fqn": ["ro_exemplar", "staging", "tpch", "tpch", "nation"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.ro_exemplar.tpch.nation", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "models/staging/tpch/sources.yml", "original_file_path": "models/staging/tpch/sources.yml", "name": "nation", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-gukeye/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "nation", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "nation mapping", "columns": {"n_nationkey": {"name": "n_nationkey", "description": "25 nations are populated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "n_name": {"name": "n_name", "description": "nation name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "n_regionkey": {"name": "n_regionkey", "description": "Foreign key to R_REGIONkey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "n_comment": {"name": "n_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"snowflake_sample_data\".\"tpch_sf1\".\"nation\"", "created_at": 1638724205}, "source.ro_exemplar.tpch.part": {"fqn": ["ro_exemplar", "staging", "tpch", "tpch", "part"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.ro_exemplar.tpch.part", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "models/staging/tpch/sources.yml", "original_file_path": "models/staging/tpch/sources.yml", "name": "part", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-gukeye/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "part", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "main part table", "columns": {"p_partkey": {"name": "p_partkey", "description": "SF*200,000 are populated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "p_name": {"name": "p_name", "description": "name of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "p_mfgr": {"name": "p_mfgr", "description": "manufacturer of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "p_brand": {"name": "p_brand", "description": "brand of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "p_type": {"name": "p_type", "description": "type of part including material", "meta": {}, "data_type": null, "quote": null, "tags": []}, "p_size": {"name": "p_size", "description": "size of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "p_container": {"name": "p_container", "description": "container of the part", "meta": {}, "data_type": null, "quote": null, "tags": []}, "p_retailprice": {"name": "p_retailprice", "description": "raw retail price", "meta": {}, "data_type": null, "quote": null, "tags": []}, "p_comment": {"name": "p_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"snowflake_sample_data\".\"tpch_sf1\".\"part\"", "created_at": 1638724205}, "source.ro_exemplar.tpch.partsupp": {"fqn": ["ro_exemplar", "staging", "tpch", "tpch", "partsupp"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.ro_exemplar.tpch.partsupp", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "models/staging/tpch/sources.yml", "original_file_path": "models/staging/tpch/sources.yml", "name": "partsupp", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-gukeye/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "partsupp", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "main part supplier table", "columns": {"ps_partkey": {"name": "ps_partkey", "description": "Foreign key to P_PARTkey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ps_suppkey": {"name": "ps_suppkey", "description": "Foreign key to S_SUPPkey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ps_availqty": {"name": "ps_availqty", "description": "raw available quantity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ps_supplycost": {"name": "ps_supplycost", "description": "raw cost", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ps_comment": {"name": "ps_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"snowflake_sample_data\".\"tpch_sf1\".\"partsupp\"", "created_at": 1638724205}, "source.ro_exemplar.tpch.region": {"fqn": ["ro_exemplar", "staging", "tpch", "tpch", "region"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.ro_exemplar.tpch.region", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "models/staging/tpch/sources.yml", "original_file_path": "models/staging/tpch/sources.yml", "name": "region", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-gukeye/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "region", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "region mapping", "columns": {"r_regionkey": {"name": "r_regionkey", "description": "5 regions are populated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "r_name": {"name": "r_name", "description": "region name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "r_comment": {"name": "r_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"snowflake_sample_data\".\"tpch_sf1\".\"region\"", "created_at": 1638724205}, "source.ro_exemplar.tpch.supplier": {"fqn": ["ro_exemplar", "staging", "tpch", "tpch", "supplier"], "database": "snowflake_sample_data", "schema": "tpch_sf1", "unique_id": "source.ro_exemplar.tpch.supplier", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "models/staging/tpch/sources.yml", "original_file_path": "models/staging/tpch/sources.yml", "name": "supplier", "source_name": "tpch", "source_description": "Welcome to the dbt Labs demo dbt project! We use the [TPCH dataset](https://docs.snowflake.com/en/user-gukeye/sample-data-tpch.html) to create a sample project to emulate what a production project might look like!", "loader": "", "identifier": "supplier", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "main supplier table", "columns": {"s_suppkey": {"name": "s_suppkey", "description": "SF*10,000 are populated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "s_name": {"name": "s_name", "description": "key of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "s_address": {"name": "s_address", "description": "address of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "s_nationkey": {"name": "s_nationkey", "description": "Foreign key to N_NATIONkey", "meta": {}, "data_type": null, "quote": null, "tags": []}, "s_phone": {"name": "s_phone", "description": "phone number of the supplier", "meta": {}, "data_type": null, "quote": null, "tags": []}, "s_acctbal": {"name": "s_acctbal", "description": "raw account balance", "meta": {}, "data_type": null, "quote": null, "tags": []}, "s_comment": {"name": "s_comment", "description": "additional commentary", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"snowflake_sample_data\".\"tpch_sf1\".\"supplier\"", "created_at": 1638724205}}, "macros": {"macro.ro_exemplar.money": {"unique_id": "macro.ro_exemplar.money", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "macros/money.sql", "original_file_path": "macros/money.sql", "name": "money", "macro_sql": "{% macro money(col) -%}\n::decimal(16,4)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% for column_name in column_dict %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence = 'p' -- [p]ermanent table. Other values are [u]nlogged table, [t]emporary table\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% do adapter.drop_relation(intermediate_relation) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', macro_namespace = 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }},\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nselect\n    child.{{ column_name }}\n\nfrom {{ model }} as child\n\nleft join {{ to }} as parent\n    on child.{{ column_name }} = parent.{{ field }}\n\nwhere child.{{ column_name }} is not null\n  and parent.{{ field }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.codegen.get_tables_in_schema": {"unique_id": "macro.codegen.get_tables_in_schema", "package_name": "codegen", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database) %}\n\n    {% set tables=dbt_utils.get_relations_by_pattern(\n            database=database_name,\n            schema_pattern=schema_name,\n            table_pattern='%'\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.codegen.generate_source": {"unique_id": "macro.codegen.generate_source", "package_name": "codegen", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False) %}\n\n{% set sources_yaml=[] %}\n\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ schema_name | lower) %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name) %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.codegen.generate_base_model": {"unique_id": "macro.codegen.generate_base_model", "package_name": "codegen", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "name": "generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{{ column | lower }}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {{ column | lower }}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.codegen.generate_model_yaml": {"unique_id": "macro.codegen.generate_model_yaml", "package_name": "codegen", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    description: \"\"') %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"\"') %}\n    {% do model_yaml.append('') %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed = \n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(field, \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n    \n-%}\n\n     \n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n        \n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set target_relation = adapter.get_relation(database=table.database,\n                                          schema=table.schema,\n                                         identifier=table.identifier) -%}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not target_relation and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ table ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not target_relation and default is not none -%}\n\n          {{ log(\"Relation \" ~ table ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}};\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724203}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, * from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, * from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1638724204}}, "docs": {"ro_exemplar.base_price": {"unique_id": "ro_exemplar.base_price", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "intermediate/intermediate.md", "original_file_path": "models/intermediate/intermediate.md", "name": "base_price", "block_contents": "since extended_price is the line item total, we back out the price per item"}, "ro_exemplar.discounted_price": {"unique_id": "ro_exemplar.discounted_price", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "intermediate/intermediate.md", "original_file_path": "models/intermediate/intermediate.md", "name": "discounted_price", "block_contents": "factoring in the discount_percentage, the line item discount total"}, "ro_exemplar.tax_rate": {"unique_id": "ro_exemplar.tax_rate", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "intermediate/intermediate.md", "original_file_path": "models/intermediate/intermediate.md", "name": "tax_rate", "block_contents": "tax rate of the order item"}, "ro_exemplar.gross_item_sales_amount": {"unique_id": "ro_exemplar.gross_item_sales_amount", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "intermediate/intermediate.md", "original_file_path": "models/intermediate/intermediate.md", "name": "gross_item_sales_amount", "block_contents": "same as extended_price"}, "ro_exemplar.discounted_item_sales_amount": {"unique_id": "ro_exemplar.discounted_item_sales_amount", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "intermediate/intermediate.md", "original_file_path": "models/intermediate/intermediate.md", "name": "discounted_item_sales_amount", "block_contents": "line item (includes quantity) discount amount"}, "ro_exemplar.item_discount_amount": {"unique_id": "ro_exemplar.item_discount_amount", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "intermediate/intermediate.md", "original_file_path": "models/intermediate/intermediate.md", "name": "item_discount_amount", "block_contents": "item level discount amount. this is always a negative number"}, "ro_exemplar.item_tax_amount": {"unique_id": "ro_exemplar.item_tax_amount", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "intermediate/intermediate.md", "original_file_path": "models/intermediate/intermediate.md", "name": "item_tax_amount", "block_contents": "item level tax total"}, "ro_exemplar.net_item_sales_amount": {"unique_id": "ro_exemplar.net_item_sales_amount", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "intermediate/intermediate.md", "original_file_path": "models/intermediate/intermediate.md", "name": "net_item_sales_amount", "block_contents": "the net total which factors in discount and tax"}, "ro_exemplar.order_item_id": {"unique_id": "ro_exemplar.order_item_id", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "order_item_id", "block_contents": "surrogate key for the model -- combo of order_id + line_number"}, "ro_exemplar.line_number": {"unique_id": "ro_exemplar.line_number", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "line_number", "block_contents": "sequence of the order items within the order"}, "ro_exemplar.return_flag": {"unique_id": "ro_exemplar.return_flag", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "return_flag", "block_contents": "letter determining the status of the return"}, "ro_exemplar.ship_date": {"unique_id": "ro_exemplar.ship_date", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "ship_date", "block_contents": "the date the order item is being shipped"}, "ro_exemplar.commit_date": {"unique_id": "ro_exemplar.commit_date", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "commit_date", "block_contents": "the date the order item is being commited"}, "ro_exemplar.receipt_date": {"unique_id": "ro_exemplar.receipt_date", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "receipt_date", "block_contents": "the receipt date of the order item"}, "ro_exemplar.ship_mode": {"unique_id": "ro_exemplar.ship_mode", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "ship_mode", "block_contents": "method of shipping"}, "ro_exemplar.comment": {"unique_id": "ro_exemplar.comment", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "comment", "block_contents": "additional commentary"}, "ro_exemplar.extended_price": {"unique_id": "ro_exemplar.extended_price", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "extended_price", "block_contents": "line item price"}, "ro_exemplar.discount_percentage": {"unique_id": "ro_exemplar.discount_percentage", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "discount_percentage", "block_contents": "percentage of the discount"}, "ro_exemplar.supplier_name": {"unique_id": "ro_exemplar.supplier_name", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "supplier_name", "block_contents": "id of the supplier"}, "ro_exemplar.supplier_address": {"unique_id": "ro_exemplar.supplier_address", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "supplier_address", "block_contents": "address of the supplier"}, "ro_exemplar.phone_number": {"unique_id": "ro_exemplar.phone_number", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "phone_number", "block_contents": "phone number of the supplier"}, "ro_exemplar.account_balance": {"unique_id": "ro_exemplar.account_balance", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "account_balance", "block_contents": "raw account balance"}, "ro_exemplar.retail_price": {"unique_id": "ro_exemplar.retail_price", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "retail_price", "block_contents": "raw retail price"}, "ro_exemplar.available_quantity": {"unique_id": "ro_exemplar.available_quantity", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "available_quantity", "block_contents": "raw available quantity"}, "ro_exemplar.cost": {"unique_id": "ro_exemplar.cost", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "staging/tpch/stg_tpch.md", "original_file_path": "models/staging/tpch/stg_tpch.md", "name": "cost", "block_contents": "raw cost"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {"exposure.ro_exemplar.yearly_part_rollup": {"fqn": ["ro_exemplar", "marts", "aggregates", "yearly_part_rollup"], "unique_id": "exposure.ro_exemplar.yearly_part_rollup", "package_name": "ro_exemplar", "root_path": "/workspace/include/dbt/rapid-onboarding-exemplar_0.20.0", "path": "marts/aggregates/exposures.yml", "original_file_path": "models/marts/aggregates/exposures.yml", "name": "yearly_part_rollup", "type": "dashboard", "owner": {"email": "dbtuserbob@getdbt.com", "name": "DBT User Bob"}, "resource_type": "exposure", "description": "# An h1 header\n============\n\nParagraphs are separated by a blank line.\n\n2nd paragraph. *Italic*, **bold**, and `monospace`\nItemized lists look like:\n  * this one\n  * that one\n  * the other one\n", "maturity": "high", "meta": {}, "tags": [], "url": "https://example.com", "depends_on": {"macros": [], "nodes": ["model.ro_exemplar.agg_ship_modes_dynamic_pivot"]}, "refs": [["agg_ship_modes_dynamic_pivot"]], "sources": [], "created_at": 1638724205}}, "selectors": {}, "disabled": [], "parent_map": {"model.ro_exemplar.order_items": ["model.ro_exemplar.stg_tpch_line_items", "model.ro_exemplar.stg_tpch_orders"], "model.ro_exemplar.part_suppliers": ["model.ro_exemplar.stg_tpch_part_suppliers", "model.ro_exemplar.stg_tpch_parts", "model.ro_exemplar.stg_tpch_suppliers"], "model.ro_exemplar.agg_customer_orders": ["model.ro_exemplar.fct_orders"], "model.ro_exemplar.dim_customers": ["model.ro_exemplar.stg_tpch_customers", "model.ro_exemplar.stg_tpch_nations", "model.ro_exemplar.stg_tpch_regions"], "model.ro_exemplar.dim_suppliers": ["model.ro_exemplar.stg_tpch_nations", "model.ro_exemplar.stg_tpch_regions", "model.ro_exemplar.stg_tpch_suppliers"], "model.ro_exemplar.fct_order_items": ["model.ro_exemplar.order_items", "model.ro_exemplar.part_suppliers"], "model.ro_exemplar.fct_orders": ["model.ro_exemplar.order_items", "model.ro_exemplar.stg_tpch_orders"], "model.ro_exemplar.dim_parts": ["model.ro_exemplar.stg_tpch_parts"], "model.ro_exemplar.agg_ship_modes_hardcoded_pivot": ["model.ro_exemplar.fct_order_items"], "model.ro_exemplar.agg_regions_segments": ["model.ro_exemplar.dim_customers", "model.ro_exemplar.fct_orders"], "model.ro_exemplar.agg_ship_modes_dynamic_pivot": ["model.ro_exemplar.fct_order_items"], "model.ro_exemplar.stg_tpch_orders": ["source.ro_exemplar.tpch.orders"], "model.ro_exemplar.stg_tpch_nations": ["source.ro_exemplar.tpch.nation"], "model.ro_exemplar.stg_tpch_regions": ["source.ro_exemplar.tpch.region"], "model.ro_exemplar.stg_tpch_customers": ["source.ro_exemplar.tpch.customer"], "model.ro_exemplar.stg_tpch_suppliers": ["source.ro_exemplar.tpch.supplier"], "model.ro_exemplar.stg_tpch_parts": ["source.ro_exemplar.tpch.part"], "model.ro_exemplar.stg_tpch_line_items": ["source.ro_exemplar.tpch.lineitem"], "model.ro_exemplar.stg_tpch_part_suppliers": ["source.ro_exemplar.tpch.partsupp"], "analysis.ro_exemplar.legacy_q3_shipping_priority_query": [], "analysis.ro_exemplar.legacy_q1_pricing_summary": [], "analysis.ro_exemplar.legacy_q2_minimum_cost_supplier": [], "analysis.ro_exemplar.legacy_q4_order_priority_checking": [], "analysis.ro_exemplar.legacy_q5_local_supplier_volume": [], "test.ro_exemplar.stg_tpch_orders_assert_positive_price": ["model.ro_exemplar.stg_tpch_orders"], "test.ro_exemplar.unique_order_items_order_item_id.ed4f8c3f3f": ["model.ro_exemplar.order_items"], "test.ro_exemplar.not_null_order_items_order_item_id.82130d1510": ["model.ro_exemplar.order_items"], "test.ro_exemplar.unique_part_suppliers_part_supplier_id.07e99480dd": ["model.ro_exemplar.part_suppliers"], "test.ro_exemplar.not_null_part_suppliers_part_supplier_id.74582227aa": ["model.ro_exemplar.part_suppliers"], "test.ro_exemplar.unique_dim_customers_customer_id.614ed4fd85": ["model.ro_exemplar.dim_customers"], "test.ro_exemplar.not_null_dim_customers_customer_id.f962be5a88": ["model.ro_exemplar.dim_customers"], "test.ro_exemplar.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.4b7c6f0e72": ["model.ro_exemplar.dim_customers"], "test.ro_exemplar.unique_dim_parts_part_id.55454abf34": ["model.ro_exemplar.dim_parts"], "test.ro_exemplar.not_null_dim_parts_part_id.c76d8f3f95": ["model.ro_exemplar.dim_parts"], "test.ro_exemplar.unique_dim_suppliers_supplier_id.c7ef9e3985": ["model.ro_exemplar.dim_suppliers"], "test.ro_exemplar.not_null_dim_suppliers_supplier_id.3249e4026f": ["model.ro_exemplar.dim_suppliers"], "test.ro_exemplar.unique_fct_order_items_order_item_id.f3d57f0ce5": ["model.ro_exemplar.fct_order_items"], "test.ro_exemplar.not_null_fct_order_items_order_item_id.8ff0a2f6c8": ["model.ro_exemplar.fct_order_items"], "test.ro_exemplar.unique_fct_orders_order_id.751c25cf10": ["model.ro_exemplar.fct_orders"], "test.ro_exemplar.not_null_fct_orders_order_id.98fd6393e1": ["model.ro_exemplar.fct_orders"], "test.ro_exemplar.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.b0e7be428a": ["model.ro_exemplar.dim_customers", "model.ro_exemplar.fct_orders"], "test.ro_exemplar.unique_agg_customer_orders_customer_id.4684ecc101": ["model.ro_exemplar.agg_customer_orders"], "test.ro_exemplar.not_null_agg_customer_orders_customer_id.5fa6f2bd3d": ["model.ro_exemplar.agg_customer_orders"], "test.ro_exemplar.accepted_values_agg_regions_segments_region__MIDDLE_EAST__AFRICA__EUROPE__ASIA__AMERICA.07539c4f49": ["model.ro_exemplar.agg_regions_segments"], "test.ro_exemplar.accepted_values_agg_regions_segments_market_segment__HOUSEHOLD__AUTOMOBILE__FURNITURE__BUILDING__MACHINERY.7f84eb689b": ["model.ro_exemplar.agg_regions_segments"], "test.ro_exemplar.not_null_agg_regions_segments_total_sales.cbfa50be5a": ["model.ro_exemplar.agg_regions_segments"], "test.ro_exemplar.unique_stg_tpch_customers_customer_id.91210f3989": ["model.ro_exemplar.stg_tpch_customers"], "test.ro_exemplar.not_null_stg_tpch_customers_customer_id.1ea7eeab8d": ["model.ro_exemplar.stg_tpch_customers"], "test.ro_exemplar.unique_stg_tpch_line_items_order_item_id.44ad132730": ["model.ro_exemplar.stg_tpch_line_items"], "test.ro_exemplar.not_null_stg_tpch_line_items_order_item_id.4d6dd162c8": ["model.ro_exemplar.stg_tpch_line_items"], "test.ro_exemplar.unique_stg_tpch_nations_nation_id.f117da9e94": ["model.ro_exemplar.stg_tpch_nations"], "test.ro_exemplar.not_null_stg_tpch_nations_nation_id.ffbfab2053": ["model.ro_exemplar.stg_tpch_nations"], "test.ro_exemplar.unique_stg_tpch_orders_order_id.9978d0404c": ["model.ro_exemplar.stg_tpch_orders"], "test.ro_exemplar.not_null_stg_tpch_orders_order_id.707be78574": ["model.ro_exemplar.stg_tpch_orders"], "test.ro_exemplar.unique_stg_tpch_part_suppliers_part_supplier_id.d840aa3ab1": ["model.ro_exemplar.stg_tpch_part_suppliers"], "test.ro_exemplar.not_null_stg_tpch_part_suppliers_part_supplier_id.c75bed2b95": ["model.ro_exemplar.stg_tpch_part_suppliers"], "test.ro_exemplar.unique_stg_tpch_parts_part_id.e2ec42e7e8": ["model.ro_exemplar.stg_tpch_parts"], "test.ro_exemplar.not_null_stg_tpch_parts_part_id.6d4bc71226": ["model.ro_exemplar.stg_tpch_parts"], "test.ro_exemplar.unique_stg_tpch_regions_region_id.45c8de89ef": ["model.ro_exemplar.stg_tpch_regions"], "test.ro_exemplar.not_null_stg_tpch_regions_region_id.af735e4377": ["model.ro_exemplar.stg_tpch_regions"], "test.ro_exemplar.unique_stg_tpch_suppliers_supplier_id.cd6c757323": ["model.ro_exemplar.stg_tpch_suppliers"], "test.ro_exemplar.not_null_stg_tpch_suppliers_supplier_id.26684a1494": ["model.ro_exemplar.stg_tpch_suppliers"], "test.ro_exemplar.source_unique_tpch_orders_o_orderkey.608ed560d8": ["source.ro_exemplar.tpch.orders"], "test.ro_exemplar.source_not_null_tpch_orders_o_orderkey.ace6662240": ["source.ro_exemplar.tpch.orders"], "test.ro_exemplar.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.bbe1984f7f": ["source.ro_exemplar.tpch.customer", "source.ro_exemplar.tpch.orders"], "test.ro_exemplar.source_unique_tpch_customer_c_custkey.16df90e0fb": ["source.ro_exemplar.tpch.customer"], "test.ro_exemplar.source_not_null_tpch_customer_c_custkey.039d457aa9": ["source.ro_exemplar.tpch.customer"], "test.ro_exemplar.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.061cb3545a": ["source.ro_exemplar.tpch.lineitem", "source.ro_exemplar.tpch.orders"], "test.ro_exemplar.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b2b7a6544b": ["source.ro_exemplar.tpch.lineitem", "source.ro_exemplar.tpch.part"], "test.ro_exemplar.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f1ff139215": ["source.ro_exemplar.tpch.lineitem", "source.ro_exemplar.tpch.supplier"], "test.ro_exemplar.source_unique_tpch_nation_n_nationkey.7c800a4723": ["source.ro_exemplar.tpch.nation"], "test.ro_exemplar.source_not_null_tpch_nation_n_nationkey.74d03fc3bd": ["source.ro_exemplar.tpch.nation"], "test.ro_exemplar.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.2107f4d6a1": ["source.ro_exemplar.tpch.nation", "source.ro_exemplar.tpch.region"], "test.ro_exemplar.source_unique_tpch_part_p_partkey.51c80d8998": ["source.ro_exemplar.tpch.part"], "test.ro_exemplar.source_not_null_tpch_part_p_partkey.8e48b1e3b2": ["source.ro_exemplar.tpch.part"], "test.ro_exemplar.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.66b73e4b2d": ["source.ro_exemplar.tpch.part", "source.ro_exemplar.tpch.partsupp"], "test.ro_exemplar.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.9a482cdc39": ["source.ro_exemplar.tpch.partsupp", "source.ro_exemplar.tpch.supplier"], "test.ro_exemplar.source_unique_tpch_region_r_regionkey.dc632affe6": ["source.ro_exemplar.tpch.region"], "test.ro_exemplar.source_not_null_tpch_region_r_regionkey.54dc0a0dd1": ["source.ro_exemplar.tpch.region"], "test.ro_exemplar.source_unique_tpch_supplier_s_suppkey.d5bc8e5944": ["source.ro_exemplar.tpch.supplier"], "test.ro_exemplar.source_not_null_tpch_supplier_s_suppkey.126b4f5bc4": ["source.ro_exemplar.tpch.supplier"], "test.ro_exemplar.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2e4e5269dc": ["source.ro_exemplar.tpch.nation", "source.ro_exemplar.tpch.supplier"], "source.ro_exemplar.tpch.orders": [], "source.ro_exemplar.tpch.customer": [], "source.ro_exemplar.tpch.lineitem": [], "source.ro_exemplar.tpch.nation": [], "source.ro_exemplar.tpch.part": [], "source.ro_exemplar.tpch.partsupp": [], "source.ro_exemplar.tpch.region": [], "source.ro_exemplar.tpch.supplier": [], "exposure.ro_exemplar.yearly_part_rollup": ["model.ro_exemplar.agg_ship_modes_dynamic_pivot"]}, "child_map": {"model.ro_exemplar.order_items": ["model.ro_exemplar.fct_order_items", "model.ro_exemplar.fct_orders", "test.ro_exemplar.not_null_order_items_order_item_id.82130d1510", "test.ro_exemplar.unique_order_items_order_item_id.ed4f8c3f3f"], "model.ro_exemplar.part_suppliers": ["model.ro_exemplar.fct_order_items", "test.ro_exemplar.not_null_part_suppliers_part_supplier_id.74582227aa", "test.ro_exemplar.unique_part_suppliers_part_supplier_id.07e99480dd"], "model.ro_exemplar.agg_customer_orders": ["test.ro_exemplar.not_null_agg_customer_orders_customer_id.5fa6f2bd3d", "test.ro_exemplar.unique_agg_customer_orders_customer_id.4684ecc101"], "model.ro_exemplar.dim_customers": ["model.ro_exemplar.agg_regions_segments", "test.ro_exemplar.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.4b7c6f0e72", "test.ro_exemplar.not_null_dim_customers_customer_id.f962be5a88", "test.ro_exemplar.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.b0e7be428a", "test.ro_exemplar.unique_dim_customers_customer_id.614ed4fd85"], "model.ro_exemplar.dim_suppliers": ["test.ro_exemplar.not_null_dim_suppliers_supplier_id.3249e4026f", "test.ro_exemplar.unique_dim_suppliers_supplier_id.c7ef9e3985"], "model.ro_exemplar.fct_order_items": ["model.ro_exemplar.agg_ship_modes_dynamic_pivot", "model.ro_exemplar.agg_ship_modes_hardcoded_pivot", "test.ro_exemplar.not_null_fct_order_items_order_item_id.8ff0a2f6c8", "test.ro_exemplar.unique_fct_order_items_order_item_id.f3d57f0ce5"], "model.ro_exemplar.fct_orders": ["model.ro_exemplar.agg_customer_orders", "model.ro_exemplar.agg_regions_segments", "test.ro_exemplar.not_null_fct_orders_order_id.98fd6393e1", "test.ro_exemplar.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.b0e7be428a", "test.ro_exemplar.unique_fct_orders_order_id.751c25cf10"], "model.ro_exemplar.dim_parts": ["test.ro_exemplar.not_null_dim_parts_part_id.c76d8f3f95", "test.ro_exemplar.unique_dim_parts_part_id.55454abf34"], "model.ro_exemplar.agg_ship_modes_hardcoded_pivot": [], "model.ro_exemplar.agg_regions_segments": ["test.ro_exemplar.accepted_values_agg_regions_segments_market_segment__HOUSEHOLD__AUTOMOBILE__FURNITURE__BUILDING__MACHINERY.7f84eb689b", "test.ro_exemplar.accepted_values_agg_regions_segments_region__MIDDLE_EAST__AFRICA__EUROPE__ASIA__AMERICA.07539c4f49", "test.ro_exemplar.not_null_agg_regions_segments_total_sales.cbfa50be5a"], "model.ro_exemplar.agg_ship_modes_dynamic_pivot": ["exposure.ro_exemplar.yearly_part_rollup"], "model.ro_exemplar.stg_tpch_orders": ["model.ro_exemplar.fct_orders", "model.ro_exemplar.order_items", "test.ro_exemplar.not_null_stg_tpch_orders_order_id.707be78574", "test.ro_exemplar.stg_tpch_orders_assert_positive_price", "test.ro_exemplar.unique_stg_tpch_orders_order_id.9978d0404c"], "model.ro_exemplar.stg_tpch_nations": ["model.ro_exemplar.dim_customers", "model.ro_exemplar.dim_suppliers", "test.ro_exemplar.not_null_stg_tpch_nations_nation_id.ffbfab2053", "test.ro_exemplar.unique_stg_tpch_nations_nation_id.f117da9e94"], "model.ro_exemplar.stg_tpch_regions": ["model.ro_exemplar.dim_customers", "model.ro_exemplar.dim_suppliers", "test.ro_exemplar.not_null_stg_tpch_regions_region_id.af735e4377", "test.ro_exemplar.unique_stg_tpch_regions_region_id.45c8de89ef"], "model.ro_exemplar.stg_tpch_customers": ["model.ro_exemplar.dim_customers", "test.ro_exemplar.not_null_stg_tpch_customers_customer_id.1ea7eeab8d", "test.ro_exemplar.unique_stg_tpch_customers_customer_id.91210f3989"], "model.ro_exemplar.stg_tpch_suppliers": ["model.ro_exemplar.dim_suppliers", "model.ro_exemplar.part_suppliers", "test.ro_exemplar.not_null_stg_tpch_suppliers_supplier_id.26684a1494", "test.ro_exemplar.unique_stg_tpch_suppliers_supplier_id.cd6c757323"], "model.ro_exemplar.stg_tpch_parts": ["model.ro_exemplar.dim_parts", "model.ro_exemplar.part_suppliers", "test.ro_exemplar.not_null_stg_tpch_parts_part_id.6d4bc71226", "test.ro_exemplar.unique_stg_tpch_parts_part_id.e2ec42e7e8"], "model.ro_exemplar.stg_tpch_line_items": ["model.ro_exemplar.order_items", "test.ro_exemplar.not_null_stg_tpch_line_items_order_item_id.4d6dd162c8", "test.ro_exemplar.unique_stg_tpch_line_items_order_item_id.44ad132730"], "model.ro_exemplar.stg_tpch_part_suppliers": ["model.ro_exemplar.part_suppliers", "test.ro_exemplar.not_null_stg_tpch_part_suppliers_part_supplier_id.c75bed2b95", "test.ro_exemplar.unique_stg_tpch_part_suppliers_part_supplier_id.d840aa3ab1"], "analysis.ro_exemplar.legacy_q3_shipping_priority_query": [], "analysis.ro_exemplar.legacy_q1_pricing_summary": [], "analysis.ro_exemplar.legacy_q2_minimum_cost_supplier": [], "analysis.ro_exemplar.legacy_q4_order_priority_checking": [], "analysis.ro_exemplar.legacy_q5_local_supplier_volume": [], "test.ro_exemplar.stg_tpch_orders_assert_positive_price": [], "test.ro_exemplar.unique_order_items_order_item_id.ed4f8c3f3f": [], "test.ro_exemplar.not_null_order_items_order_item_id.82130d1510": [], "test.ro_exemplar.unique_part_suppliers_part_supplier_id.07e99480dd": [], "test.ro_exemplar.not_null_part_suppliers_part_supplier_id.74582227aa": [], "test.ro_exemplar.unique_dim_customers_customer_id.614ed4fd85": [], "test.ro_exemplar.not_null_dim_customers_customer_id.f962be5a88": [], "test.ro_exemplar.accepted_values_dim_customers_region__AFRICA__MIDDLE_EAST__ASIA__EUROPE__AMERICA.4b7c6f0e72": [], "test.ro_exemplar.unique_dim_parts_part_id.55454abf34": [], "test.ro_exemplar.not_null_dim_parts_part_id.c76d8f3f95": [], "test.ro_exemplar.unique_dim_suppliers_supplier_id.c7ef9e3985": [], "test.ro_exemplar.not_null_dim_suppliers_supplier_id.3249e4026f": [], "test.ro_exemplar.unique_fct_order_items_order_item_id.f3d57f0ce5": [], "test.ro_exemplar.not_null_fct_order_items_order_item_id.8ff0a2f6c8": [], "test.ro_exemplar.unique_fct_orders_order_id.751c25cf10": [], "test.ro_exemplar.not_null_fct_orders_order_id.98fd6393e1": [], "test.ro_exemplar.relationships_fct_orders_customer_id__customer_id__ref_dim_customers_.b0e7be428a": [], "test.ro_exemplar.unique_agg_customer_orders_customer_id.4684ecc101": [], "test.ro_exemplar.not_null_agg_customer_orders_customer_id.5fa6f2bd3d": [], "test.ro_exemplar.accepted_values_agg_regions_segments_region__MIDDLE_EAST__AFRICA__EUROPE__ASIA__AMERICA.07539c4f49": [], "test.ro_exemplar.accepted_values_agg_regions_segments_market_segment__HOUSEHOLD__AUTOMOBILE__FURNITURE__BUILDING__MACHINERY.7f84eb689b": [], "test.ro_exemplar.not_null_agg_regions_segments_total_sales.cbfa50be5a": [], "test.ro_exemplar.unique_stg_tpch_customers_customer_id.91210f3989": [], "test.ro_exemplar.not_null_stg_tpch_customers_customer_id.1ea7eeab8d": [], "test.ro_exemplar.unique_stg_tpch_line_items_order_item_id.44ad132730": [], "test.ro_exemplar.not_null_stg_tpch_line_items_order_item_id.4d6dd162c8": [], "test.ro_exemplar.unique_stg_tpch_nations_nation_id.f117da9e94": [], "test.ro_exemplar.not_null_stg_tpch_nations_nation_id.ffbfab2053": [], "test.ro_exemplar.unique_stg_tpch_orders_order_id.9978d0404c": [], "test.ro_exemplar.not_null_stg_tpch_orders_order_id.707be78574": [], "test.ro_exemplar.unique_stg_tpch_part_suppliers_part_supplier_id.d840aa3ab1": [], "test.ro_exemplar.not_null_stg_tpch_part_suppliers_part_supplier_id.c75bed2b95": [], "test.ro_exemplar.unique_stg_tpch_parts_part_id.e2ec42e7e8": [], "test.ro_exemplar.not_null_stg_tpch_parts_part_id.6d4bc71226": [], "test.ro_exemplar.unique_stg_tpch_regions_region_id.45c8de89ef": [], "test.ro_exemplar.not_null_stg_tpch_regions_region_id.af735e4377": [], "test.ro_exemplar.unique_stg_tpch_suppliers_supplier_id.cd6c757323": [], "test.ro_exemplar.not_null_stg_tpch_suppliers_supplier_id.26684a1494": [], "test.ro_exemplar.source_unique_tpch_orders_o_orderkey.608ed560d8": [], "test.ro_exemplar.source_not_null_tpch_orders_o_orderkey.ace6662240": [], "test.ro_exemplar.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.bbe1984f7f": [], "test.ro_exemplar.source_unique_tpch_customer_c_custkey.16df90e0fb": [], "test.ro_exemplar.source_not_null_tpch_customer_c_custkey.039d457aa9": [], "test.ro_exemplar.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.061cb3545a": [], "test.ro_exemplar.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b2b7a6544b": [], "test.ro_exemplar.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f1ff139215": [], "test.ro_exemplar.source_unique_tpch_nation_n_nationkey.7c800a4723": [], "test.ro_exemplar.source_not_null_tpch_nation_n_nationkey.74d03fc3bd": [], "test.ro_exemplar.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.2107f4d6a1": [], "test.ro_exemplar.source_unique_tpch_part_p_partkey.51c80d8998": [], "test.ro_exemplar.source_not_null_tpch_part_p_partkey.8e48b1e3b2": [], "test.ro_exemplar.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.66b73e4b2d": [], "test.ro_exemplar.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.9a482cdc39": [], "test.ro_exemplar.source_unique_tpch_region_r_regionkey.dc632affe6": [], "test.ro_exemplar.source_not_null_tpch_region_r_regionkey.54dc0a0dd1": [], "test.ro_exemplar.source_unique_tpch_supplier_s_suppkey.d5bc8e5944": [], "test.ro_exemplar.source_not_null_tpch_supplier_s_suppkey.126b4f5bc4": [], "test.ro_exemplar.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2e4e5269dc": [], "source.ro_exemplar.tpch.orders": ["model.ro_exemplar.stg_tpch_orders", "test.ro_exemplar.source_not_null_tpch_orders_o_orderkey.ace6662240", "test.ro_exemplar.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.061cb3545a", "test.ro_exemplar.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.bbe1984f7f", "test.ro_exemplar.source_unique_tpch_orders_o_orderkey.608ed560d8"], "source.ro_exemplar.tpch.customer": ["model.ro_exemplar.stg_tpch_customers", "test.ro_exemplar.source_not_null_tpch_customer_c_custkey.039d457aa9", "test.ro_exemplar.source_relationships_tpch_orders_o_custkey__c_custkey__source_tpch_customer_.bbe1984f7f", "test.ro_exemplar.source_unique_tpch_customer_c_custkey.16df90e0fb"], "source.ro_exemplar.tpch.lineitem": ["model.ro_exemplar.stg_tpch_line_items", "test.ro_exemplar.source_relationships_tpch_lineitem_l_orderkey__o_orderkey__source_tpch_orders_.061cb3545a", "test.ro_exemplar.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b2b7a6544b", "test.ro_exemplar.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f1ff139215"], "source.ro_exemplar.tpch.nation": ["model.ro_exemplar.stg_tpch_nations", "test.ro_exemplar.source_not_null_tpch_nation_n_nationkey.74d03fc3bd", "test.ro_exemplar.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.2107f4d6a1", "test.ro_exemplar.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2e4e5269dc", "test.ro_exemplar.source_unique_tpch_nation_n_nationkey.7c800a4723"], "source.ro_exemplar.tpch.part": ["model.ro_exemplar.stg_tpch_parts", "test.ro_exemplar.source_not_null_tpch_part_p_partkey.8e48b1e3b2", "test.ro_exemplar.source_relationships_tpch_lineitem_l_partkey__p_partkey__source_tpch_part_.b2b7a6544b", "test.ro_exemplar.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.66b73e4b2d", "test.ro_exemplar.source_unique_tpch_part_p_partkey.51c80d8998"], "source.ro_exemplar.tpch.partsupp": ["model.ro_exemplar.stg_tpch_part_suppliers", "test.ro_exemplar.source_relationships_tpch_partsupp_ps_partkey__p_partkey__source_tpch_part_.66b73e4b2d", "test.ro_exemplar.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.9a482cdc39"], "source.ro_exemplar.tpch.region": ["model.ro_exemplar.stg_tpch_regions", "test.ro_exemplar.source_not_null_tpch_region_r_regionkey.54dc0a0dd1", "test.ro_exemplar.source_relationships_tpch_nation_n_regionkey__r_regionkey__source_tpch_region_.2107f4d6a1", "test.ro_exemplar.source_unique_tpch_region_r_regionkey.dc632affe6"], "source.ro_exemplar.tpch.supplier": ["model.ro_exemplar.stg_tpch_suppliers", "test.ro_exemplar.source_not_null_tpch_supplier_s_suppkey.126b4f5bc4", "test.ro_exemplar.source_relationships_tpch_lineitem_l_suppkey__s_suppkey__source_tpch_supplier_.f1ff139215", "test.ro_exemplar.source_relationships_tpch_partsupp_ps_suppkey__s_suppkey__source_tpch_supplier_.9a482cdc39", "test.ro_exemplar.source_relationships_tpch_supplier_s_nationkey__n_nationkey__source_tpch_nation_.2e4e5269dc", "test.ro_exemplar.source_unique_tpch_supplier_s_suppkey.d5bc8e5944"], "exposure.ro_exemplar.yearly_part_rollup": []}}