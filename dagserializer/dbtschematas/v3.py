# generated by datamodel-codegen:
#   filename:  https://schemas.getdbt.com/dbt/manifest/v3.json
#   timestamp: 2021-11-26T11:15:44+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import (
    BaseModel,
    Extra,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    constr,
)


class ManifestMetadata(BaseModel):
    class Config:
        extra = Extra.forbid

    dbt_schema_version: Optional[
        StrictStr
    ] = 'https://schemas.getdbt.com/dbt/manifest/v3.json'
    dbt_version: Optional[StrictStr] = '0.21.0rc1'
    generated_at: Optional[datetime] = '2021-09-24T13:29:14.317700Z'
    invocation_id: Optional[Optional[StrictStr]] = None
    env: Optional[Dict[str, StrictStr]] = {}
    project_id: Optional[Optional[StrictStr]] = Field(
        None, description='A unique identifier for the project'
    )
    user_id: Optional[
        Optional[
            constr(
                regex=r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}',
                strict=True,
            )
        ]
    ] = Field(None, description='A unique identifier for the user')
    send_anonymous_usage_stats: Optional[Optional[StrictBool]] = Field(
        None,
        description='Whether dbt is configured to send anonymous usage statistics',
    )
    adapter_type: Optional[Optional[StrictStr]] = Field(
        None, description='The type name of the adapter'
    )


class ResourceType(Enum):
    analysis = 'analysis'


class FileHash(BaseModel):
    class Config:
        extra = Extra.forbid

    name: StrictStr
    checksum: StrictStr


class Hook(BaseModel):
    class Config:
        extra = Extra.forbid

    sql: StrictStr
    transaction: Optional[StrictBool] = True
    index: Optional[Optional[StrictInt]] = None


class DependsOn(BaseModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[StrictStr]] = []
    nodes: Optional[List[StrictStr]] = []


class ColumnInfo(BaseModel):
    class Config:
        extra = Extra.allow

    name: StrictStr
    description: Optional[StrictStr] = ''
    meta: Optional[Dict[str, Any]] = {}
    data_type: Optional[Optional[StrictStr]] = None
    quote: Optional[Optional[StrictBool]] = None
    tags: Optional[List[StrictStr]] = []


class Docs(BaseModel):
    class Config:
        extra = Extra.forbid

    show: Optional[StrictBool] = True


class InjectedCTE(BaseModel):
    class Config:
        extra = Extra.forbid

    id: StrictStr
    sql: StrictStr


class ResourceType1(Enum):
    test = 'test'


class TestConfig(BaseModel):
    class Config:
        extra = Extra.allow

    enabled: Optional[StrictBool] = True
    alias: Optional[Optional[StrictStr]] = None
    schema_: Optional[Optional[StrictStr]] = Field(
        'dbt_test__audit', alias='schema'
    )
    database: Optional[Optional[StrictStr]] = None
    tags: Optional[Union[List[StrictStr], StrictStr]] = []
    meta: Optional[Dict[str, Any]] = {}
    materialized: Optional[StrictStr] = 'test'
    severity: Optional[
        constr(regex=r'^([Ww][Aa][Rr][Nn]|[Ee][Rr][Rr][Oo][Rr])$', strict=True)
    ] = 'ERROR'
    store_failures: Optional[Optional[StrictBool]] = None
    where: Optional[Optional[StrictStr]] = None
    limit: Optional[Optional[StrictInt]] = None
    fail_calc: Optional[StrictStr] = 'count(*)'
    warn_if: Optional[StrictStr] = '!= 0'
    error_if: Optional[StrictStr] = '!= 0'


class ResourceType2(Enum):
    model = 'model'


class ResourceType3(Enum):
    operation = 'operation'


class ResourceType4(Enum):
    rpc = 'rpc'


class ResourceType5(Enum):
    test = 'test'


class TestMetadata(BaseModel):
    class Config:
        extra = Extra.forbid

    name: StrictStr
    kwargs: Optional[Dict[str, Any]] = {}
    namespace: Optional[Optional[StrictStr]] = None


class ResourceType6(Enum):
    seed = 'seed'


class SeedConfig(BaseModel):
    class Config:
        extra = Extra.allow

    enabled: Optional[StrictBool] = True
    alias: Optional[Optional[StrictStr]] = None
    schema_: Optional[Optional[StrictStr]] = Field(None, alias='schema')
    database: Optional[Optional[StrictStr]] = None
    tags: Optional[Union[List[StrictStr], StrictStr]] = []
    meta: Optional[Dict[str, Any]] = {}
    materialized: Optional[StrictStr] = 'seed'
    persist_docs: Optional[Dict[str, Any]] = {}
    post_hook: Optional[List[Hook]] = Field([], alias='post-hook')
    pre_hook: Optional[List[Hook]] = Field([], alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = {}
    column_types: Optional[Dict[str, Any]] = {}
    full_refresh: Optional[Optional[StrictBool]] = None
    on_schema_change: Optional[Optional[StrictStr]] = 'ignore'
    quote_columns: Optional[Optional[StrictBool]] = None


class ResourceType7(Enum):
    snapshot = 'snapshot'


class ResourceType8(Enum):
    analysis = 'analysis'


class ResourceType9(Enum):
    test = 'test'


class ParsedDataTestNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType9
    alias: StrictStr
    checksum: FileHash
    config: Optional[TestConfig] = {
        'enabled': True,
        'alias': None,
        'schema': 'dbt_test__audit',
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'test',
        'severity': 'ERROR',
        'store_failures': None,
        'where': None,
        'limit': None,
        'fail_calc': 'count(*)',
        'warn_if': '!= 0',
        'error_if': '!= 0',
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}


class ResourceType10(Enum):
    operation = 'operation'


class ResourceType11(Enum):
    model = 'model'


class ResourceType12(Enum):
    rpc = 'rpc'


class ResourceType13(Enum):
    test = 'test'


class ParsedSchemaTestNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    test_metadata: TestMetadata
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType13
    alias: StrictStr
    checksum: FileHash
    config: Optional[TestConfig] = {
        'enabled': True,
        'alias': None,
        'schema': 'dbt_test__audit',
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'test',
        'severity': 'ERROR',
        'store_failures': None,
        'where': None,
        'limit': None,
        'fail_calc': 'count(*)',
        'warn_if': '!= 0',
        'error_if': '!= 0',
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}
    column_name: Optional[Optional[StrictStr]] = None


class ResourceType14(Enum):
    seed = 'seed'


class ParsedSeedNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType14
    alias: StrictStr
    checksum: FileHash
    config: Optional[SeedConfig] = {
        'enabled': True,
        'alias': None,
        'schema': None,
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'seed',
        'persist_docs': {},
        'quoting': {},
        'column_types': {},
        'full_refresh': None,
        'on_schema_change': 'ignore',
        'quote_columns': None,
        'post-hook': [],
        'pre-hook': [],
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}


class ResourceType15(Enum):
    snapshot = 'snapshot'


class SnapshotConfig(BaseModel):
    class Config:
        extra = Extra.allow

    enabled: Optional[StrictBool] = True
    alias: Optional[Optional[StrictStr]] = None
    schema_: Optional[Optional[StrictStr]] = Field(None, alias='schema')
    database: Optional[Optional[StrictStr]] = None
    tags: Optional[Union[List[StrictStr], StrictStr]] = []
    meta: Optional[Dict[str, Any]] = {}
    materialized: Optional[StrictStr] = 'snapshot'
    persist_docs: Optional[Dict[str, Any]] = {}
    post_hook: Optional[List[Hook]] = Field([], alias='post-hook')
    pre_hook: Optional[List[Hook]] = Field([], alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = {}
    column_types: Optional[Dict[str, Any]] = {}
    full_refresh: Optional[Optional[StrictBool]] = None
    on_schema_change: Optional[Optional[StrictStr]] = 'ignore'
    strategy: Optional[Optional[StrictStr]] = None
    unique_key: Optional[Optional[StrictStr]] = None
    target_schema: Optional[Optional[StrictStr]] = None
    target_database: Optional[Optional[StrictStr]] = None
    updated_at: Optional[Optional[StrictStr]] = None
    check_cols: Optional[Optional[Union[StrictStr, List[StrictStr]]]] = None


class ResourceType16(Enum):
    source = 'source'


class Quoting(BaseModel):
    class Config:
        extra = Extra.forbid

    database: Optional[Optional[StrictBool]] = None
    schema_: Optional[Optional[StrictBool]] = Field(None, alias='schema')
    identifier: Optional[Optional[StrictBool]] = None
    column: Optional[Optional[StrictBool]] = None


class FreshnessMetadata(BaseModel):
    class Config:
        extra = Extra.forbid

    dbt_schema_version: Optional[
        StrictStr
    ] = 'https://schemas.getdbt.com/dbt/sources/v2.json'
    dbt_version: Optional[StrictStr] = '0.21.0rc1'
    generated_at: Optional[datetime] = '2021-09-24T13:29:14.312598Z'
    invocation_id: Optional[Optional[StrictStr]] = None
    env: Optional[Dict[str, StrictStr]] = {}


class Status(Enum):
    runtime_error = 'runtime error'


class SourceFreshnessRuntimeError(BaseModel):
    class Config:
        extra = Extra.forbid

    unique_id: StrictStr
    error: Optional[Optional[Union[StrictStr, StrictInt]]] = None
    status: Status


class Status1(Enum):
    pass_ = 'pass'
    warn = 'warn'
    error = 'error'
    runtime_error = 'runtime error'


class Period(Enum):
    minute = 'minute'
    hour = 'hour'
    day = 'day'


class Time(BaseModel):
    class Config:
        extra = Extra.forbid

    count: StrictInt
    period: Period


class TimingInfo(BaseModel):
    class Config:
        extra = Extra.forbid

    name: StrictStr
    started_at: Optional[Optional[datetime]] = None
    completed_at: Optional[Optional[datetime]] = None


class ExternalPartition(BaseModel):
    class Config:
        extra = Extra.allow

    name: Optional[StrictStr] = ''
    description: Optional[StrictStr] = ''
    data_type: Optional[StrictStr] = ''
    meta: Optional[Dict[str, Any]] = {}


class SourceConfig(BaseModel):
    class Config:
        extra = Extra.allow

    enabled: Optional[StrictBool] = True


class ResourceType17(Enum):
    macro = 'macro'


class MacroDependsOn(BaseModel):
    class Config:
        extra = Extra.forbid

    macros: Optional[List[StrictStr]] = []


class MacroArgument(BaseModel):
    class Config:
        extra = Extra.forbid

    name: StrictStr
    type: Optional[Optional[StrictStr]] = None
    description: Optional[StrictStr] = ''


class ParsedDocumentation(BaseModel):
    class Config:
        extra = Extra.forbid

    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    block_contents: StrictStr


class Type(Enum):
    dashboard = 'dashboard'
    notebook = 'notebook'
    analysis = 'analysis'
    ml = 'ml'
    application = 'application'


class ResourceType18(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    docs = 'docs'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'


class MaturityEnum(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'


class ExposureOwner(BaseModel):
    class Config:
        extra = Extra.forbid

    email: StrictStr
    name: Optional[Optional[StrictStr]] = None


class NodeConfig(BaseModel):
    class Config:
        extra = Extra.allow

    enabled: Optional[StrictBool] = True
    alias: Optional[Optional[StrictStr]] = None
    schema_: Optional[Optional[StrictStr]] = Field(None, alias='schema')
    database: Optional[Optional[StrictStr]] = None
    tags: Optional[Union[List[StrictStr], StrictStr]] = []
    meta: Optional[Dict[str, Any]] = {}
    materialized: Optional[StrictStr] = 'view'
    persist_docs: Optional[Dict[str, Any]] = {}
    post_hook: Optional[List[Hook]] = Field([], alias='post-hook')
    pre_hook: Optional[List[Hook]] = Field([], alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = {}
    column_types: Optional[Dict[str, Any]] = {}
    full_refresh: Optional[Optional[StrictBool]] = None
    on_schema_change: Optional[Optional[StrictStr]] = 'ignore'


class CompiledDataTestNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    compiled: StrictBool
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType1
    alias: StrictStr
    checksum: FileHash
    config: Optional[TestConfig] = {
        'enabled': True,
        'alias': None,
        'schema': 'dbt_test__audit',
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'test',
        'severity': 'ERROR',
        'store_failures': None,
        'where': None,
        'limit': None,
        'fail_calc': 'count(*)',
        'warn_if': '!= 0',
        'error_if': '!= 0',
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}
    compiled_sql: Optional[Optional[StrictStr]] = None
    extra_ctes_injected: Optional[StrictBool] = False
    extra_ctes: Optional[List[InjectedCTE]] = []
    relation_name: Optional[Optional[StrictStr]] = None


class CompiledModelNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    compiled: StrictBool
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType2
    alias: StrictStr
    checksum: FileHash
    config: Optional[NodeConfig] = {
        'enabled': True,
        'alias': None,
        'schema': None,
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'view',
        'persist_docs': {},
        'quoting': {},
        'column_types': {},
        'full_refresh': None,
        'on_schema_change': 'ignore',
        'post-hook': [],
        'pre-hook': [],
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}
    compiled_sql: Optional[Optional[StrictStr]] = None
    extra_ctes_injected: Optional[StrictBool] = False
    extra_ctes: Optional[List[InjectedCTE]] = []
    relation_name: Optional[Optional[StrictStr]] = None


class CompiledHookNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    compiled: StrictBool
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType3
    alias: StrictStr
    checksum: FileHash
    config: Optional[NodeConfig] = {
        'enabled': True,
        'alias': None,
        'schema': None,
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'view',
        'persist_docs': {},
        'quoting': {},
        'column_types': {},
        'full_refresh': None,
        'on_schema_change': 'ignore',
        'post-hook': [],
        'pre-hook': [],
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}
    compiled_sql: Optional[Optional[StrictStr]] = None
    extra_ctes_injected: Optional[StrictBool] = False
    extra_ctes: Optional[List[InjectedCTE]] = []
    relation_name: Optional[Optional[StrictStr]] = None
    index: Optional[Optional[StrictInt]] = None


class CompiledRPCNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    compiled: StrictBool
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType4
    alias: StrictStr
    checksum: FileHash
    config: Optional[NodeConfig] = {
        'enabled': True,
        'alias': None,
        'schema': None,
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'view',
        'persist_docs': {},
        'quoting': {},
        'column_types': {},
        'full_refresh': None,
        'on_schema_change': 'ignore',
        'post-hook': [],
        'pre-hook': [],
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}
    compiled_sql: Optional[Optional[StrictStr]] = None
    extra_ctes_injected: Optional[StrictBool] = False
    extra_ctes: Optional[List[InjectedCTE]] = []
    relation_name: Optional[Optional[StrictStr]] = None


class CompiledSchemaTestNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    test_metadata: TestMetadata
    compiled: StrictBool
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType5
    alias: StrictStr
    checksum: FileHash
    config: Optional[TestConfig] = {
        'enabled': True,
        'alias': None,
        'schema': 'dbt_test__audit',
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'test',
        'severity': 'ERROR',
        'store_failures': None,
        'where': None,
        'limit': None,
        'fail_calc': 'count(*)',
        'warn_if': '!= 0',
        'error_if': '!= 0',
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}
    compiled_sql: Optional[Optional[StrictStr]] = None
    extra_ctes_injected: Optional[StrictBool] = False
    extra_ctes: Optional[List[InjectedCTE]] = []
    relation_name: Optional[Optional[StrictStr]] = None
    column_name: Optional[Optional[StrictStr]] = None


class CompiledSeedNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    compiled: StrictBool
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType6
    alias: StrictStr
    checksum: FileHash
    config: Optional[SeedConfig] = {
        'enabled': True,
        'alias': None,
        'schema': None,
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'seed',
        'persist_docs': {},
        'quoting': {},
        'column_types': {},
        'full_refresh': None,
        'on_schema_change': 'ignore',
        'quote_columns': None,
        'post-hook': [],
        'pre-hook': [],
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}
    compiled_sql: Optional[Optional[StrictStr]] = None
    extra_ctes_injected: Optional[StrictBool] = False
    extra_ctes: Optional[List[InjectedCTE]] = []
    relation_name: Optional[Optional[StrictStr]] = None


class CompiledSnapshotNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    compiled: StrictBool
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType7
    alias: StrictStr
    checksum: FileHash
    config: Optional[NodeConfig] = {
        'enabled': True,
        'alias': None,
        'schema': None,
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'view',
        'persist_docs': {},
        'quoting': {},
        'column_types': {},
        'full_refresh': None,
        'on_schema_change': 'ignore',
        'post-hook': [],
        'pre-hook': [],
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}
    compiled_sql: Optional[Optional[StrictStr]] = None
    extra_ctes_injected: Optional[StrictBool] = False
    extra_ctes: Optional[List[InjectedCTE]] = []
    relation_name: Optional[Optional[StrictStr]] = None


class ParsedAnalysisNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType8
    alias: StrictStr
    checksum: FileHash
    config: Optional[NodeConfig] = {
        'enabled': True,
        'alias': None,
        'schema': None,
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'view',
        'persist_docs': {},
        'quoting': {},
        'column_types': {},
        'full_refresh': None,
        'on_schema_change': 'ignore',
        'post-hook': [],
        'pre-hook': [],
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}


class ParsedHookNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType10
    alias: StrictStr
    checksum: FileHash
    config: Optional[NodeConfig] = {
        'enabled': True,
        'alias': None,
        'schema': None,
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'view',
        'persist_docs': {},
        'quoting': {},
        'column_types': {},
        'full_refresh': None,
        'on_schema_change': 'ignore',
        'post-hook': [],
        'pre-hook': [],
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}
    index: Optional[Optional[StrictInt]] = None


class ParsedModelNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType11
    alias: StrictStr
    checksum: FileHash
    config: Optional[NodeConfig] = {
        'enabled': True,
        'alias': None,
        'schema': None,
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'view',
        'persist_docs': {},
        'quoting': {},
        'column_types': {},
        'full_refresh': None,
        'on_schema_change': 'ignore',
        'post-hook': [],
        'pre-hook': [],
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}


class ParsedRPCNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType12
    alias: StrictStr
    checksum: FileHash
    config: Optional[NodeConfig] = {
        'enabled': True,
        'alias': None,
        'schema': None,
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'view',
        'persist_docs': {},
        'quoting': {},
        'column_types': {},
        'full_refresh': None,
        'on_schema_change': 'ignore',
        'post-hook': [],
        'pre-hook': [],
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}


class ParsedSnapshotNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType15
    alias: StrictStr
    checksum: FileHash
    config: SnapshotConfig
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}


class FreshnessThreshold(BaseModel):
    class Config:
        extra = Extra.forbid

    warn_after: Optional[Optional[Time]] = None
    error_after: Optional[Optional[Time]] = None
    filter: Optional[Optional[StrictStr]] = None


class SourceFreshnessOutput(BaseModel):
    class Config:
        extra = Extra.forbid

    unique_id: StrictStr
    max_loaded_at: datetime
    snapshotted_at: datetime
    max_loaded_at_time_ago_in_s: StrictFloat
    status: Status1
    criteria: FreshnessThreshold
    adapter_response: Dict[str, Any]
    timing: List[TimingInfo]
    thread_id: StrictStr
    execution_time: StrictFloat


class ExternalTable(BaseModel):
    class Config:
        extra = Extra.allow

    location: Optional[Optional[StrictStr]] = None
    file_format: Optional[Optional[StrictStr]] = None
    row_format: Optional[Optional[StrictStr]] = None
    tbl_properties: Optional[Optional[StrictStr]] = None
    partitions: Optional[Optional[List[ExternalPartition]]] = None


class ParsedMacro(BaseModel):
    class Config:
        extra = Extra.forbid

    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    macro_sql: StrictStr
    resource_type: ResourceType17
    tags: Optional[List[StrictStr]] = []
    depends_on: Optional[MacroDependsOn] = {'macros': []}
    description: Optional[StrictStr] = ''
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    arguments: Optional[List[MacroArgument]] = []
    created_at: Optional[StrictInt] = 1632490154


class ParsedExposure(BaseModel):
    class Config:
        extra = Extra.forbid

    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    type: Type
    owner: ExposureOwner
    resource_type: Optional[ResourceType18] = 'exposure'
    description: Optional[StrictStr] = ''
    maturity: Optional[Optional[MaturityEnum]] = None
    meta: Optional[Dict[str, Any]] = {}
    tags: Optional[List[StrictStr]] = []
    url: Optional[Optional[StrictStr]] = None
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List[StrictStr]]] = []
    created_at: Optional[StrictInt] = 1632490154


class CompiledAnalysisNode(BaseModel):
    class Config:
        extra = Extra.forbid

    raw_sql: StrictStr
    compiled: StrictBool
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    fqn: List[StrictStr]
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    resource_type: ResourceType
    alias: StrictStr
    checksum: FileHash
    config: Optional[NodeConfig] = {
        'enabled': True,
        'alias': None,
        'schema': None,
        'database': None,
        'tags': [],
        'meta': {},
        'materialized': 'view',
        'persist_docs': {},
        'quoting': {},
        'column_types': {},
        'full_refresh': None,
        'on_schema_change': 'ignore',
        'post-hook': [],
        'pre-hook': [],
    }
    tags: Optional[List[StrictStr]] = []
    refs: Optional[List[List[StrictStr]]] = []
    sources: Optional[List[List]] = []
    depends_on: Optional[DependsOn] = {'macros': [], 'nodes': []}
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    docs: Optional[Docs] = {'show': True}
    patch_path: Optional[Optional[StrictStr]] = None
    compiled_path: Optional[Optional[StrictStr]] = None
    build_path: Optional[Optional[StrictStr]] = None
    deferred: Optional[StrictBool] = False
    unrendered_config: Optional[Dict[str, Any]] = {}
    created_at: Optional[StrictInt] = 1632490154
    config_call_dict: Optional[Dict[str, Any]] = {}
    compiled_sql: Optional[Optional[StrictStr]] = None
    extra_ctes_injected: Optional[StrictBool] = False
    extra_ctes: Optional[List[InjectedCTE]] = []
    relation_name: Optional[Optional[StrictStr]] = None


class ParsedSourceDefinition(BaseModel):
    class Config:
        extra = Extra.forbid

    fqn: List[StrictStr]
    database: Optional[Optional[StrictStr]] = None
    schema_: StrictStr = Field(..., alias='schema')
    unique_id: StrictStr
    package_name: StrictStr
    root_path: StrictStr
    path: StrictStr
    original_file_path: StrictStr
    name: StrictStr
    source_name: StrictStr
    source_description: StrictStr
    loader: StrictStr
    identifier: StrictStr
    resource_type: ResourceType16
    quoting: Optional[Quoting] = {
        'database': None,
        'schema': None,
        'identifier': None,
        'column': None,
    }
    loaded_at_field: Optional[Optional[StrictStr]] = None
    freshness: Optional[Optional[FreshnessThreshold]] = None
    external: Optional[Optional[ExternalTable]] = None
    description: Optional[StrictStr] = ''
    columns: Optional[Dict[str, ColumnInfo]] = {}
    meta: Optional[Dict[str, Any]] = {}
    source_meta: Optional[Dict[str, Any]] = {}
    tags: Optional[List[StrictStr]] = []
    config: Optional[SourceConfig] = {'enabled': True}
    patch_path: Optional[Optional[StrictStr]] = None
    unrendered_config: Optional[Dict[str, Any]] = {}
    relation_name: Optional[Optional[StrictStr]] = None
    created_at: Optional[StrictInt] = 1632490154


class Model(BaseModel):
    class Config:
        extra = Extra.forbid

    metadata: ManifestMetadata = Field(
        ..., description='Metadata about the manifest'
    )
    nodes: Dict[
        str,
        Union[
            CompiledAnalysisNode,
            CompiledDataTestNode,
            CompiledModelNode,
            CompiledHookNode,
            CompiledRPCNode,
            CompiledSchemaTestNode,
            CompiledSeedNode,
            CompiledSnapshotNode,
            ParsedAnalysisNode,
            ParsedDataTestNode,
            ParsedHookNode,
            ParsedModelNode,
            ParsedRPCNode,
            ParsedSchemaTestNode,
            ParsedSeedNode,
            ParsedSnapshotNode,
        ],
    ] = Field(
        ...,
        description='The nodes defined in the dbt project and its dependencies',
    )
    sources: Dict[str, ParsedSourceDefinition] = Field(
        ...,
        description='The sources defined in the dbt project and its dependencies',
    )
    macros: Dict[str, ParsedMacro] = Field(
        ...,
        description='The macros defined in the dbt project and its dependencies',
    )
    docs: Dict[str, ParsedDocumentation] = Field(
        ...,
        description='The docs defined in the dbt project and its dependencies',
    )
    exposures: Dict[str, ParsedExposure] = Field(
        ...,
        description='The exposures defined in the dbt project and its dependencies',
    )
    selectors: Dict[str, Any] = Field(
        ..., description='The selectors defined in selectors.yml'
    )
    disabled: Optional[
        Optional[
            List[
                Union[
                    CompiledAnalysisNode,
                    CompiledDataTestNode,
                    CompiledModelNode,
                    CompiledHookNode,
                    CompiledRPCNode,
                    CompiledSchemaTestNode,
                    CompiledSeedNode,
                    CompiledSnapshotNode,
                    ParsedAnalysisNode,
                    ParsedDataTestNode,
                    ParsedHookNode,
                    ParsedModelNode,
                    ParsedRPCNode,
                    ParsedSchemaTestNode,
                    ParsedSeedNode,
                    ParsedSnapshotNode,
                    ParsedSourceDefinition,
                ]
            ]
        ]
    ] = Field(None, description='A list of the disabled nodes in the target')
    parent_map: Optional[Optional[Dict[str, List[StrictStr]]]] = Field(
        None, description='A mapping from\xa0child nodes to their dependencies'
    )
    child_map: Optional[Optional[Dict[str, List[StrictStr]]]] = Field(
        None, description='A mapping from parent nodes to their dependents'
    )
